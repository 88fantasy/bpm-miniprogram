import { wxRequest } from '../../utils/request';
const WXBizDataCrypt = require('../../utils/RdWXBizDataCrypt');
Page({
    app: getApp(),
    data: {
        sessionKey: "",
        rules: [{
                name: 'user',
                rules: { required: true, message: '帐号必填' },
            }, {
                name: 'pwd',
                rules: { required: true, message: '密码必填' },
            }],
        formData: {
            user: "",
            pwd: ""
        },
        msgShow: false,
        error: '',
    },
    bindMsgHide() {
        this.setData({
            msgShow: false,
        });
    },
    onShowUser() {
        this.setData({
            showUserDialog: true
        });
    },
    onUserConfirm() {
        const that = this;
        this.selectComponent('#form').validate((valid, errors) => {
            if (!valid) {
                const firstError = Object.keys(errors);
                if (firstError.length) {
                    this.setData({
                        error: errors[firstError[0]].message
                    });
                }
            }
            else {
                const { user, pwd } = this.data.formData;
                that.login(user, pwd, true);
            }
        });
    },
    setError(errMsg) {
        this.setData({
            error: errMsg,
            msgShow: true,
        });
    },
    formInputChange(e) {
        const { field } = e.currentTarget.dataset;
        this.setData({
            [`formData.${field}`]: e.detail.value
        });
    },
    login(user, pwd, bind = false) {
        const app = getApp();
        const that = this;
        wxRequest({
            header: {
                'content-type': 'application/x-www-form-urlencoded',
            },
            url: "/login",
            method: 'POST',
            data: {
                username: user,
                password: pwd
            }
        }).then((res) => {
            if (res.statusCode == 200) {
                const data = res.data;
                app.setAccountInfo(user, data.data.token);
                wx.switchTab({ url: "/pages/list/list" });
                if (bind) {
                    const sessionData = app.getSessionCache();
                    if (sessionData) {
                        wxRequest({
                            url: "https://wechat-api.gzmpc.com/v1/wechat/bindOpenId",
                            method: 'POST',
                            data: {
                                uaccount: user,
                                openid: sessionData.openid
                            }
                        }).then((res) => {
                            if (res.statusCode == 200) {
                            }
                        });
                    }
                }
            }
            else {
                that.setError(res.errMsg);
            }
        })
            .catch((res) => {
            that.setError(res.errMsg);
        });
    },
    onLoad(option) {
        const { auto } = option;
        const { app } = this;
        const that = this;
        const sessionData = app.getSessionCache();
        if (sessionData && !auto) {
            wxRequest({
                url: `https://wechat-api.gzmpc.com/v1/wechat/getUaccountByOpenId/${sessionData.openid}`,
            }).then((res) => {
                if (res.statusCode == 200) {
                    const data = res.data;
                    if (data && data.errcode == 0) {
                        that.login(data.uaccount, "mima");
                    }
                }
            });
        }
    },
    getUserInfo(e) {
        const app = getApp();
        app.globalData.userInfo = e.detail.userInfo;
        this.onUserConfirm();
    },
    getPhoneNumber(e) {
        const { app } = this;
        const that = this;
        wx.checkSession({
            success: function (res) {
                console.log(res);
                var ency = e.detail.encryptedData;
                var iv = e.detail.iv;
                var sessionk = that.data.sessionKey;
                console.log('session data: ', e, ency, iv, sessionk);
                const errMsg = e.detail.errMsg;
                if (errMsg && errMsg.startsWith('getPhoneNumber:fail')) {
                    that.setData({
                        modalstatus: true
                    });
                }
                else {
                    const pc = new WXBizDataCrypt(app.globalData.appId, sessionk);
                    var data = pc.decryptData(ency, iv);
                    console.log('解密后 data: ', data);
                }
            },
            fail: function () {
                console.log("session_key 已经失效，需要重新执行登录流程");
            }
        });
    }
});
//# sourceMappingURL=data:application/json;base64,