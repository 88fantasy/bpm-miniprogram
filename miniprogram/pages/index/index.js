import { wxRequest } from '../../utils/request';
import { CONSTANT_SESSIONDATA_KEY } from '../../utils/constant';
import Toast from '../../miniprogram_npm/@vant/weapp/toast/toast';
const WXBizDataCrypt = require('../../utils/RdWXBizDataCrypt');
Page({
    app: getApp(),
    data: {
        sessionKey: "",
        rules: [{
                name: 'user',
                rules: { required: true, message: '帐号必填' },
            }, {
                name: 'pwd',
                rules: { required: true, message: '密码必填' },
            }],
        formData: {
            user: "",
            pwd: ""
        },
        msgShow: false,
        error: '',
        isCom: getApp().globalData.isCom,
    },
    bindMsgHide() {
        this.setData({
            msgShow: false,
        });
    },
    onShowUser() {
        this.setData({
            showUserDialog: true
        });
    },
    onUserConfirm() {
        const that = this;
        this.selectComponent('#form').validate((valid, errors) => {
            if (!valid) {
                const firstError = Object.keys(errors);
                if (firstError.length) {
                    this.setData({
                        error: errors[firstError[0]].message
                    });
                }
            }
            else {
                const { user, pwd } = this.data.formData;
                that.login(user, pwd, true);
            }
        });
    },
    setError(errMsg) {
        this.setData({
            error: errMsg,
            msgShow: true,
        });
    },
    formInputChange(e) {
        const { field } = e.currentTarget.dataset;
        this.setData({
            [`formData.${field}`]: e.detail.value
        });
    },
    comLogin() {
        const that = this;
        const app = getApp();
        wx.qy.login({
            success: function (res) {
                if (res.code) {
                    wxRequest({
                        url: "https://wechat-api.gzmpc.com/v1/com/code2Session",
                        method: 'POST',
                        data: {
                            agentId: app.globalData.agentId,
                            jsCode: res.code,
                        }
                    }).then((res) => {
                        if (res.statusCode == 200) {
                            const data = res.data;
                            const result = data;
                            if (result.errcode === 0) {
                                const sessionData = { ...result };
                                app.globalData.comSessionData = sessionData;
                                wx.setStorageSync(CONSTANT_SESSIONDATA_KEY, sessionData);
                                that.login(sessionData.userid, "mima");
                            }
                        }
                        else {
                        }
                    });
                }
                else {
                    console.log('登录失败！' + res.errMsg);
                }
            }
        });
    },
    login(user, pwd, bind = false) {
        const app = getApp();
        const that = this;
        wxRequest({
            header: {
                'content-type': 'application/x-www-form-urlencoded',
            },
            url: "/login",
            method: 'POST',
            data: {
                username: user,
                password: pwd
            }
        }).then((res) => {
            if (res.statusCode == 200) {
                const data = res.data;
                app.setAccountInfo(user, data.data.token);
                wx.switchTab({ url: "/pages/list/list" });
                if (bind && !app.globalData.isCom) {
                    const sessionData = app.getSessionCache();
                    if (sessionData) {
                        wxRequest({
                            url: "https://wechat-api.gzmpc.com/v1/wechat/bindOpenId",
                            method: 'POST',
                            data: {
                                uaccount: user,
                                openid: sessionData.openid
                            }
                        }).then((res) => {
                            if (res.statusCode == 200) {
                            }
                        });
                    }
                }
            }
            else {
                that.setError(res.errMsg);
            }
        })
            .catch((res) => {
            that.setError(res.errMsg);
        });
    },
    onLoad(option) {
        const { auto } = option;
        const { app } = this;
        const that = this;
        if (!app.globalData.isCom) {
            const sessionData = app.getSessionCache();
            if (sessionData && !auto) {
                wxRequest({
                    url: `https://wechat-api.gzmpc.com/v1/wechat/getUaccountByOpenId/${sessionData.openid}`,
                }).then((res) => {
                    if (res.statusCode == 200) {
                        const data = res.data;
                        if (data && data.errcode == 0) {
                            that.login(data.uaccount, "mima");
                        }
                    }
                });
            }
        }
        else {
            Toast.loading({
                message: '企业微信登录中...',
                forbidClick: true,
                mask: true,
            });
            wx.qy.checkSession({
                success: function () {
                    const sessionData = app.getComSessionCache();
                    if (sessionData) {
                        that.login(sessionData.userid, "mima");
                    }
                    that.comLogin();
                },
                fail: function () {
                    that.comLogin();
                }
            });
        }
    },
    getUserInfo(e) {
        const app = getApp();
        app.globalData.userInfo = e.detail.userInfo;
        this.onUserConfirm();
    },
    getPhoneNumber(e) {
        const { app } = this;
        const that = this;
        wx.checkSession({
            success: function (res) {
                console.log(res);
                var ency = e.detail.encryptedData;
                var iv = e.detail.iv;
                var sessionk = that.data.sessionKey;
                console.log('session data: ', e, ency, iv, sessionk);
                const errMsg = e.detail.errMsg;
                if (errMsg && errMsg.startsWith('getPhoneNumber:fail')) {
                    that.setData({
                        modalstatus: true
                    });
                }
                else {
                    const pc = new WXBizDataCrypt(app.globalData.appId, sessionk);
                    var data = pc.decryptData(ency, iv);
                    console.log('解密后 data: ', data);
                }
            },
            fail: function () {
                console.log("session_key 已经失效，需要重新执行登录流程");
            }
        });
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDaEQsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDaEUsT0FBTyxLQUFLLE1BQU0sK0NBQStDLENBQUM7QUFHbEUsTUFBTSxjQUFjLEdBQUcsT0FBTyxDQUFDLDhCQUE4QixDQUFDLENBQUM7QUFFL0QsSUFBSSxDQUFDO0lBQ0gsR0FBRyxFQUFFLE1BQU0sRUFBYTtJQUN4QixJQUFJLEVBQUU7UUFDSixVQUFVLEVBQUUsRUFBRTtRQUNkLEtBQUssRUFBRSxDQUFDO2dCQUNOLElBQUksRUFBRSxNQUFNO2dCQUNaLEtBQUssRUFBRSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRTthQUMzQyxFQUFFO2dCQUNELElBQUksRUFBRSxLQUFLO2dCQUNYLEtBQUssRUFBRSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRTthQUMzQyxDQUFDO1FBQ0YsUUFBUSxFQUFFO1lBQ1IsSUFBSSxFQUFFLEVBQUU7WUFDUixHQUFHLEVBQUUsRUFBRTtTQUNSO1FBQ0EsT0FBTyxFQUFFLEtBQUs7UUFDZCxLQUFLLEVBQUUsRUFBRTtRQUNULEtBQUssRUFBRSxNQUFNLEVBQWEsQ0FBQyxVQUFVLENBQUMsS0FBSztLQUM3QztJQUVELFdBQVc7UUFDVixJQUFJLENBQUMsT0FBTyxDQUFDO1lBQ1osT0FBTyxFQUFHLEtBQUs7U0FDZixDQUFDLENBQUM7SUFDSixDQUFDO0lBRUQsVUFBVTtRQUNSLElBQUksQ0FBQyxPQUFPLENBQUM7WUFDWCxjQUFjLEVBQUUsSUFBSTtTQUNyQixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsYUFBYTtRQUNYLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQztRQUNs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QkFDdEMsSUFBSSxNQUFNLElBQUksTUFBTSxDQUFDLFVBQVUsQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFO29CQUN0RCxJQUFJLENBQUMsT0FBTyxDQUFDO3dCQUNYLFdBQVcsRUFBRSxJQUFJO3FCQUNsQixDQUFDLENBQUM7aUJBQ0o7cUJBQU07b0JBQ0wsTUFBTSxFQUFFLEdBQUcsSUFBSSxjQUFjLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUM7b0JBRTlELElBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFHLEVBQUUsQ0FBQyxDQUFBO29CQUNwQyxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsQ0FBQTtpQkFDaEM7WUFDSCxDQUFDO1lBQ0QsSUFBSSxFQUFFO2dCQUNKLE9BQU8sQ0FBQyxHQUFHLENBQUMsNkJBQTZCLENBQUMsQ0FBQztZQUU3QyxDQUFDO1NBQ0YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8vIGluZGV4LnRzXG5pbXBvcnQgeyB3eFJlcXVlc3QgfSBmcm9tICcuLi8uLi91dGlscy9yZXF1ZXN0JztcbmltcG9ydCB7IENPTlNUQU5UX1NFU1NJT05EQVRBX0tFWSB9IGZyb20gJy4uLy4uL3V0aWxzL2NvbnN0YW50JztcbmltcG9ydCBUb2FzdCBmcm9tICcuLi8uLi9taW5pcHJvZ3JhbV9ucG0vQHZhbnQvd2VhcHAvdG9hc3QvdG9hc3QnO1xuXG5cbmNvbnN0IFdYQml6RGF0YUNyeXB0ID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvUmRXWEJpekRhdGFDcnlwdCcpO1xuXG5QYWdlKHtcbiAgYXBwOiBnZXRBcHA8QnBtT3B0aW9uPigpLFxuICBkYXRhOiB7XG4gICAgc2Vzc2lvbktleTogXCJcIixcbiAgICBydWxlczogW3tcbiAgICAgIG5hbWU6ICd1c2VyJyxcbiAgICAgIHJ1bGVzOiB7IHJlcXVpcmVkOiB0cnVlLCBtZXNzYWdlOiAn5biQ5Y+35b+F5aGrJyB9LFxuICAgIH0sIHtcbiAgICAgIG5hbWU6ICdwd2QnLFxuICAgICAgcnVsZXM6IHsgcmVxdWlyZWQ6IHRydWUsIG1lc3NhZ2U6ICflr4bnoIHlv4XloasnIH0sXG4gICAgfV0sXG4gICAgZm9ybURhdGE6IHtcbiAgICAgIHVzZXI6IFwiXCIsXG4gICAgICBwd2Q6IFwiXCJcbiAgICB9LFxuICAgICBtc2dTaG93OiBmYWxzZSxcbiAgICAgZXJyb3I6ICcnLFxuICAgICBpc0NvbTogZ2V0QXBwPEJwbU9wdGlvbj4oKS5nbG9iYWxEYXRhLmlzQ29tLFxuICB9LFxuICAvLyDkuovku7blpITnkIblh73mlbBcbiAgYmluZE1zZ0hpZGUoKSB7XG4gICB0aGlzLnNldERhdGEoe1xuICAgIG1zZ1Nob3cgOiBmYWxzZSxcbiAgIH0pO1xuICB9LFxuXG4gIG9uU2hvd1VzZXIoKSB7XG4gICAgdGhpcy5zZXREYXRhKHtcbiAgICAgIHNob3dVc2VyRGlhbG9nOiB0cnVlXG4gICAgfSk7XG4gIH0sXG5cbiAgb25Vc2VyQ29uZmlybSgpIHtcbiAgICBjb25zdCB0aGF0ID0gdGhpcztcbiAgICB0aGlzLnNlbGVjdENvbXBvbmVudCgnI2Zvcm0nKS52YWxpZGF0ZSgodmFsaWQ6IGFueSwgZXJyb3JzOiBhbnkpID0+IHtcbiAgICAgIGlmICghdmFsaWQpIHtcbiAgICAgICAgY29uc3QgZmlyc3RFcnJvciA9IE9iamVjdC5rZXlzKGVycm9ycylcbiAgICAgICAgaWYgKGZpcnN0RXJyb3IubGVuZ3RoKSB7XG4gICAgICAgICAgdGhpcy5zZXREYXRhKHtcbiAgICAgICAgICAgIGVycm9yOiBlcnJvcnNbZmlyc3RFcnJvclswXV0ubWVzc2FnZVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHt1c2VyLCBwd2QgfSA9IHRoaXMuZGF0YS5mb3JtRGF0YTtcbiAgICAgICAgdGhhdC5sb2dpbih1c2VyLHB3ZCwgdHJ1ZSk7XG4gICAgICB9XG4gICAgfSlcbiAgfSxcblxuICBzZXRFcnJvcihlcnJNc2c6IHN0cmluZykge1xuICAgIHRoaXMuc2V0RGF0YSh7XG4gICAgICBlcnJvcjogZXJyTXNnLFxuICAgICAgbXNnU2hvdzogdHJ1ZSxcbiAgICB9KTtcbiAgfSxcblxuICBmb3JtSW5wdXRDaGFuZ2UoZTogYW55KSB7XG4gICAgY29uc3QgeyBmaWVsZCB9ID0gZS5jdXJyZW50VGFyZ2V0LmRhdGFzZXRcbiAgICB0aGlzLnNldERhdGEoe1xuICAgICAgW2Bmb3JtRGF0YS4ke2ZpZWxkfWBdOiBlLmRldGFpbC52YWx1ZVxuICAgIH0pXG4gIH0sXG5cbiAgY29tTG9naW4oKSB7XG4gICAgY29uc3QgdGhhdCA9IHRoaXM7XG4gICAgY29uc3QgYXBwID0gZ2V0QXBwPEJwbU9wdGlvbj4oKTtcbiAgICB3eC5xeS5sb2dpbih7XG4gICAgICBzdWNjZXNzOiBmdW5jdGlvbihyZXM6IHsgY29kZTogc3RyaW5nOyBlcnJNc2c6IHN0cmluZzsgfSkge1xuICAgICAgICBpZiAocmVzLmNvZGUpIHtcbiAgICAgICAgICAvL+WPkei1t+e9kee7nOivt+axglxuICAgICAgICAgIHd4UmVxdWVzdCh7XG4gICAgICAgICAgICB1cmw6IFwiaHR0cHM6Ly93ZWNoYXQtYXBpLmd6bXBjLmNvbS92MS9jb20vY29kZTJTZXNzaW9uXCIsXG4gICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgYWdlbnRJZDogYXBwLmdsb2JhbERhdGEuYWdlbnRJZCxcbiAgICAgICAgICAgICAganNDb2RlOiByZXMuY29kZSxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgICAgIGlmIChyZXMuc3RhdHVzQ29kZSA9PSAyMDApIHtcbiAgICAgICAgICAgICAgY29uc3QgZGF0YTogYW55ID0gcmVzLmRhdGE7XG4gICAgICAgICAgICAgIGNvbnN0IHJlc3VsdDogV2VjaGF0TWluaXByb2dyYW1Db21Db2RlMlNlc3Npb25SZXN1bHQgPSBkYXRhO1xuICAgICAgICAgICAgICBpZihyZXN1bHQuZXJyY29kZSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNlc3Npb25EYXRhOiBDb21TZXNzaW9uRGF0YSA9IHsgLi4ucmVzdWx0IH07IFxuICAgICAgICAgICAgICAgIGFwcC5nbG9iYWxEYXRhLmNvbVNlc3Npb25EYXRhID0gc2Vzc2lvbkRhdGE7XG5cbiAgICAgICAgICAgICAgICAvL+S/neWtmOWIsOe8k+WtmOS4rVxuICAgICAgICAgICAgICAgIHd4LnNldFN0b3JhZ2VTeW5jKENPTlNUQU5UX1NFU1NJT05EQVRBX0tFWSwgc2Vzc2lvbkRhdGEpO1xuXG4gICAgICAgICAgICAgICAgdGhhdC5sb2dpbihzZXNzaW9uRGF0YS51c2VyaWQsIFwibWltYVwiKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygn55m75b2V5aSx6LSl77yBJyArIHJlcy5lcnJNc2cpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcblxuICBsb2dpbih1c2VyOiBzdHJpbmcsIHB3ZDogc3RyaW5nLCBiaW5kOiBib29sZWFuID0gZmFsc2UpIHtcbiAgICBjb25zdCBhcHAgPSBnZXRBcHA8QnBtT3B0aW9uPigpO1xuICAgIGNvbnN0IHRoYXQgPSB0aGlzO1xuICAgIHd4UmVxdWVzdCh7XG4gICAgICBoZWFkZXIgOiB7XG4gICAgICAgICdjb250ZW50LXR5cGUnIDogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsXG4gICAgICB9LFxuICAgICAgdXJsOiBcIi9sb2dpblwiLFxuICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIHVzZXJuYW1lOiB1c2VyLFxuICAgICAgICBwYXNzd29yZDogcHdkXG4gICAgICB9XG4gICAgfSkudGhlbigocmVzKSA9PiB7XG4gICAgICBpZihyZXMuc3RhdHVzQ29kZSA9PSAyMDApIHtcbiAgICAgICAgY29uc3QgZGF0YTphbnkgID0gcmVzLmRhdGE7XG4gICAgICAgIGFwcC5zZXRBY2NvdW50SW5mbyh1c2VyLCBkYXRhLmRhdGEudG9rZW4pO1xuICAgICAgICB3eC5zd2l0Y2hUYWIoe3VybDogXCIvcGFnZXMvbGlzdC9saXN0XCJ9KTtcblxuICAgICAgICBpZihiaW5kICYmICFhcHAuZ2xvYmFsRGF0YS5pc0NvbSkge1xuICAgICAgICAgIGNvbnN0IHNlc3Npb25EYXRhID0gYXBwLmdldFNlc3Npb25DYWNoZSgpO1xuICAgICAgICAgIGlmKHNlc3Npb25EYXRhKSB7XG4gICAgICAgICAgICB3eFJlcXVlc3Qoe1xuICAgICAgICAgICAgICB1cmw6IFwiaHR0cHM6Ly93ZWNoYXQtYXBpLmd6bXBjLmNvbS92MS93ZWNoYXQvYmluZE9wZW5JZFwiLFxuICAgICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgIHVhY2NvdW50OiB1c2VyLFxuICAgICAgICAgICAgICAgIG9wZW5pZDogc2Vzc2lvbkRhdGEub3BlbmlkXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICAgICAgICBpZihyZXMuc3RhdHVzQ29kZSA9PSAyMDApIHtcbiAgICAgICAgICAgICAgICAvLyBjb25zdCBkYXRhOmFueSAgPSByZXMuZGF0YTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdGhhdC5zZXRFcnJvcihyZXMuZXJyTXNnKTtcbiAgICAgIH1cbiAgICB9KVxuICAgIC5jYXRjaCgocmVzOiBXZWNoYXRNaW5pcHJvZ3JhbS5HZW5lcmFsQ2FsbGJhY2tSZXN1bHQpID0+IHtcbiAgICAgIHRoYXQuc2V0RXJyb3IocmVzLmVyck1zZyk7XG4gICAgfSk7XG4gIH0sXG5cbiAgb25Mb2FkKG9wdGlvbjogYW55KSB7XG4gICAgY29uc3QgeyBhdXRvIH0gPSBvcHRpb247XG4gICAgY29uc3QgeyBhcHAgfSA9IHRoaXM7XG4gICAgY29uc3QgdGhhdCA9IHRoaXM7XG5cbiAgICBpZighYXBwLmdsb2JhbERhdGEuaXNDb20pIHtcbiAgICAgIGNvbnN0IHNlc3Npb25EYXRhID0gYXBwLmdldFNlc3Npb25DYWNoZSgpO1xuICAgICAgaWYoc2Vzc2lvbkRhdGEgJiYgIWF1dG8pIHtcbiAgICAgICAgd3hSZXF1ZXN0KHtcbiAgICAgICAgICB1cmw6IGBodHRwczovL3dlY2hhdC1hcGkuZ3ptcGMuY29tL3YxL3dlY2hhdC9nZXRVYWNjb3VudEJ5T3BlbklkLyR7c2Vzc2lvbkRhdGEub3BlbmlkfWAsXG4gICAgICAgIH0pLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICAgIGlmKHJlcy5zdGF0dXNDb2RlID09IDIwMCkge1xuICAgICAgICAgICAgY29uc3QgZGF0YTphbnkgID0gcmVzLmRhdGE7XG4gICAgICAgICAgICBpZihkYXRhICYmIGRhdGEuZXJyY29kZSA9PSAwKSB7XG4gICAgICAgICAgICAgIHRoYXQubG9naW4oZGF0YS51YWNjb3VudCwgXCJtaW1hXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgVG9hc3QubG9hZGluZyh7XG4gICAgICAgIG1lc3NhZ2U6ICfkvIHkuJrlvq7kv6HnmbvlvZXkuK0uLi4nLFxuICAgICAgICBmb3JiaWRDbGljazogdHJ1ZSxcbiAgICAgICAgbWFzazogdHJ1ZSxcbiAgICAgIH0pO1xuICAgICAgd3gucXkuY2hlY2tTZXNzaW9uKHtcbiAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oKXtcbiAgICAgICAgICAvL3Nlc3Npb25fa2V5IOacqui/h+acn++8jOW5tuS4lOWcqOacrOeUn+WRveWRqOacn+S4gOebtOacieaViFxuICAgICAgICAgIGNvbnN0IHNlc3Npb25EYXRhID0gYXBwLmdldENvbVNlc3Npb25DYWNoZSgpO1xuICAgICAgICAgIGlmKHNlc3Npb25EYXRhKSB7XG4gICAgICAgICAgICB0aGF0LmxvZ2luKHNlc3Npb25EYXRhLnVzZXJpZCwgXCJtaW1hXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGF0LmNvbUxvZ2luKCk7XG4gICAgICAgIH0sXG4gICAgICAgIGZhaWw6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgLy8gc2Vzc2lvbl9rZXkg5bey57uP5aSx5pWI77yM6ZyA6KaB6YeN5paw5omn6KGM55m75b2V5rWB56iLXG4gICAgICAgICAgdGhhdC5jb21Mb2dpbigpO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgfSxcbiAgZ2V0VXNlckluZm8oZTogYW55KSB7XG4gICAgY29uc3QgYXBwID0gZ2V0QXBwPEJwbU9wdGlvbj4oKTtcbiAgICBhcHAuZ2xvYmFsRGF0YS51c2VySW5mbyA9IGUuZGV0YWlsLnVzZXJJbmZvO1xuICAgIHRoaXMub25Vc2VyQ29uZmlybSgpO1xuICB9LFxuICBnZXRQaG9uZU51bWJlcihlOiBhbnkpIHtcbiAgICBjb25zdCB7IGFwcCB9ID0gdGhpcztcbiAgICBjb25zdCB0aGF0ID0gdGhpcztcbiAgICB3eC5jaGVja1Nlc3Npb24oe1xuICAgICAgc3VjY2VzczogZnVuY3Rpb24gKHJlcykge1xuICAgICAgICBjb25zb2xlLmxvZyhyZXMpO1xuICAgICAgICB2YXIgZW5jeSA9IGUuZGV0YWlsLmVuY3J5cHRlZERhdGE7XG4gICAgICAgIHZhciBpdiA9IGUuZGV0YWlsLml2O1xuICAgICAgICB2YXIgc2Vzc2lvbmsgPSB0aGF0LmRhdGEuc2Vzc2lvbktleTtcbiAgICAgICAgY29uc29sZS5sb2coJ3Nlc3Npb24gZGF0YTogJywgZSwgZW5jeSwgaXYsIHNlc3Npb25rKTtcbiAgICAgICAgY29uc3QgZXJyTXNnOnN0cmluZyA9IGUuZGV0YWlsLmVyck1zZztcbiAgICAgICAgaWYgKGVyck1zZyAmJiBlcnJNc2cuc3RhcnRzV2l0aCgnZ2V0UGhvbmVOdW1iZXI6ZmFpbCcpKSB7XG4gICAgICAgICAgdGhhdC5zZXREYXRhKHtcbiAgICAgICAgICAgIG1vZGFsc3RhdHVzOiB0cnVlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7IC8v5ZCM5oSP5o6I5p2DXG4gICAgICAgICAgY29uc3QgcGMgPSBuZXcgV1hCaXpEYXRhQ3J5cHQoYXBwLmdsb2JhbERhdGEuYXBwSWQsIHNlc3Npb25rKTtcblxuICAgICAgICAgIHZhciBkYXRhID0gcGMuZGVjcnlwdERhdGEoZW5jeSAsIGl2KVxuICAgICAgICAgIGNvbnNvbGUubG9nKCfop6Plr4blkI4gZGF0YTogJywgZGF0YSlcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGZhaWw6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJzZXNzaW9uX2tleSDlt7Lnu4/lpLHmlYjvvIzpnIDopoHph43mlrDmiafooYznmbvlvZXmtYHnqItcIik7XG4gICAgICAgIC8vIHRoYXQud3hsb2dpbigpOyAvL+mHjeaWsOeZu+W9lVxuICAgICAgfVxuICAgIH0pO1xuICB9XG59KVxuIl19