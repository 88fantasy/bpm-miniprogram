import { wxRequest } from '../../utils/request';
import { CONSTANT_SESSIONDATA_KEY } from '../../utils/constant';
const WXBizDataCrypt = require('../../utils/RdWXBizDataCrypt');
Page({
    app: getApp(),
    data: {
        sessionKey: "",
        rules: [{
                name: 'user',
                rules: { required: true, message: '帐号必填' },
            }, {
                name: 'pwd',
                rules: { required: true, message: '密码必填' },
            }],
        formData: {
            user: "",
            pwd: ""
        },
        msgShow: false,
        error: '',
        isCom: getApp().globalData.isCom,
    },
    bindMsgHide() {
        this.setData({
            msgShow: false,
        });
    },
    onShowUser() {
        this.setData({
            showUserDialog: true
        });
    },
    onUserConfirm() {
        const that = this;
        this.selectComponent('#form').validate((valid, errors) => {
            if (!valid) {
                const firstError = Object.keys(errors);
                if (firstError.length) {
                    this.setData({
                        error: errors[firstError[0]].message
                    });
                }
            }
            else {
                const { user, pwd } = this.data.formData;
                that.login(user, pwd, true);
            }
        });
    },
    setError(errMsg) {
        this.setData({
            error: errMsg,
            msgShow: true,
        });
    },
    formInputChange(e) {
        const { field } = e.currentTarget.dataset;
        this.setData({
            [`formData.${field}`]: e.detail.value
        });
    },
    comLogin() {
        const that = this;
        const app = getApp();
        wx.qy.login({
            success: function (res) {
                if (res.code) {
                    wxRequest({
                        url: "https://develop.gzmpc.com/api/wechat/v1/com/code2Session",
                        method: 'POST',
                        data: {
                            agentId: app.globalData.agentId,
                            jsCode: res.code,
                        }
                    }).then((res) => {
                        if (res.statusCode == 200) {
                            const result = res.data;
                            if (result && result.status && result.data.errcode === 0) {
                                const sessionData = { ...result.data };
                                app.globalData.comSessionData = sessionData;
                                wx.setStorageSync(CONSTANT_SESSIONDATA_KEY, sessionData);
                                that.login(sessionData.userid, "mima");
                            }
                        }
                        else {
                        }
                    });
                }
                else {
                    console.log('登录失败！' + res.errMsg);
                }
            }
        });
    },
    login(user, pwd, bind = false) {
        const app = getApp();
        const that = this;
        wxRequest({
            header: {
                'content-type': 'application/x-www-form-urlencoded',
            },
            url: "/login",
            method: 'POST',
            data: {
                username: user,
                password: pwd
            }
        }).then((res) => {
            if (res.statusCode == 200) {
                const data = res.data;
                app.setAccountInfo(user, data.data.token);
                wx.switchTab({ url: "/pages/list/list" });
                if (bind && !app.globalData.isCom) {
                    const sessionData = app.getSessionCache();
                    if (sessionData) {
                        wxRequest({
                            url: "https://develop.gzmpc.com/api/wechat/v1/wechat/bindOpenId",
                            method: 'POST',
                            data: {
                                uaccount: user,
                                openid: sessionData.openid
                            }
                        }).then((res) => {
                            if (res.statusCode == 200) {
                            }
                        });
                    }
                }
            }
            else {
                that.setError(res.errMsg);
            }
        })
            .catch((res) => {
            that.setError(res.errMsg);
        });
    },
    onLoad(option) {
        const { auto } = option;
        const { app } = this;
        const that = this;
        if (!app.globalData.isCom) {
            const sessionData = app.getSessionCache();
            if (sessionData && !auto) {
                wxRequest({
                    url: `https://develop.gzmpc.com/api/wechat/v1/wechat/getUaccountByOpenId/${sessionData.openid}`,
                }).then((res) => {
                    if (res.statusCode == 200) {
                        const data = res.data;
                        if (data && data.status) {
                            that.login(data.data, "mima");
                        }
                    }
                });
            }
        }
        else {
            wx.qy.checkSession({
                success: function () {
                    const sessionData = app.getComSessionCache();
                    if (sessionData) {
                        that.login(sessionData.userid, "mima");
                    }
                    that.comLogin();
                },
                fail: function () {
                    that.comLogin();
                }
            });
        }
    },
    getUserInfo(e) {
        const app = getApp();
        app.globalData.userInfo = e.detail.userInfo;
        this.onUserConfirm();
    },
    getPhoneNumber(e) {
        const { app } = this;
        const that = this;
        wx.checkSession({
            success: function (res) {
                console.log(res);
                var ency = e.detail.encryptedData;
                var iv = e.detail.iv;
                var sessionk = that.data.sessionKey;
                console.log('session data: ', e, ency, iv, sessionk);
                const errMsg = e.detail.errMsg;
                if (errMsg && errMsg.startsWith('getPhoneNumber:fail')) {
                    that.setData({
                        modalstatus: true
                    });
                }
                else {
                    const pc = new WXBizDataCrypt(app.globalData.appId, sessionk);
                    var data = pc.decryptData(ency, iv);
                    console.log('解密后 data: ', data);
                }
            },
            fail: function () {
                console.log("session_key 已经失效，需要重新执行登录流程");
            }
        });
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDaEQsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFHaEUsTUFBTSxjQUFjLEdBQUcsT0FBTyxDQUFDLDhCQUE4QixDQUFDLENBQUM7QUFFL0QsSUFBSSxDQUFDO0lBQ0gsR0FBRyxFQUFFLE1BQU0sRUFBYTtJQUN4QixJQUFJLEVBQUU7UUFDSixVQUFVLEVBQUUsRUFBRTtRQUNkLEtBQUssRUFBRSxDQUFDO2dCQUNOLElBQUksRUFBRSxNQUFNO2dCQUNaLEtBQUssRUFBRSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRTthQUMzQyxFQUFFO2dCQUNELElBQUksRUFBRSxLQUFLO2dCQUNYLEtBQUssRUFBRSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRTthQUMzQyxDQUFDO1FBQ0YsUUFBUSxFQUFFO1lBQ1IsSUFBSSxFQUFFLEVBQUU7WUFDUixHQUFHLEVBQUUsRUFBRTtTQUNSO1FBQ0EsT0FBTyxFQUFFLEtBQUs7UUFDZCxLQUFLLEVBQUUsRUFBRTtRQUNULEtBQUssRUFBRSxNQUFNLEVBQWEsQ0FBQyxVQUFVLENBQUMsS0FBSztLQUM3QztJQUVELFdBQVc7UUFDVixJQUFJLENBQUMsT0FBTyxDQUFDO1lBQ1osT0FBTyxFQUFHLEtBQUs7U0FDZixDQUFDLENBQUM7SUFDSixDQUFDO0lBRUQsVUFBVTtRQUNSLElBQUksQ0FBQyxPQUFPLENBQUM7WUFDWCxjQUFjLEVBQUUsSUFBSTtTQUNyQixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsYUFBYTtRQUNYLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQztRQUNsQixJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxD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cUJBQU07b0JBQ0wsTUFBTSxFQUFFLEdBQUcsSUFBSSxjQUFjLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUM7b0JBRTlELElBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFHLEVBQUUsQ0FBQyxDQUFBO29CQUNwQyxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsQ0FBQTtpQkFDaEM7WUFDSCxDQUFDO1lBQ0QsSUFBSSxFQUFFO2dCQUNKLE9BQU8sQ0FBQyxHQUFHLENBQUMsNkJBQTZCLENBQUMsQ0FBQztZQUU3QyxDQUFDO1NBQ0YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8vIGluZGV4LnRzXG5pbXBvcnQgeyB3eFJlcXVlc3QgfSBmcm9tICcuLi8uLi91dGlscy9yZXF1ZXN0JztcbmltcG9ydCB7IENPTlNUQU5UX1NFU1NJT05EQVRBX0tFWSB9IGZyb20gJy4uLy4uL3V0aWxzL2NvbnN0YW50JztcblxuXG5jb25zdCBXWEJpekRhdGFDcnlwdCA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL1JkV1hCaXpEYXRhQ3J5cHQnKTtcblxuUGFnZSh7XG4gIGFwcDogZ2V0QXBwPEJwbU9wdGlvbj4oKSxcbiAgZGF0YToge1xuICAgIHNlc3Npb25LZXk6IFwiXCIsXG4gICAgcnVsZXM6IFt7XG4gICAgICBuYW1lOiAndXNlcicsXG4gICAgICBydWxlczogeyByZXF1aXJlZDogdHJ1ZSwgbWVzc2FnZTogJ+W4kOWPt+W/heWhqycgfSxcbiAgICB9LCB7XG4gICAgICBuYW1lOiAncHdkJyxcbiAgICAgIHJ1bGVzOiB7IHJlcXVpcmVkOiB0cnVlLCBtZXNzYWdlOiAn5a+G56CB5b+F5aGrJyB9LFxuICAgIH1dLFxuICAgIGZvcm1EYXRhOiB7XG4gICAgICB1c2VyOiBcIlwiLFxuICAgICAgcHdkOiBcIlwiXG4gICAgfSxcbiAgICAgbXNnU2hvdzogZmFsc2UsXG4gICAgIGVycm9yOiAnJyxcbiAgICAgaXNDb206IGdldEFwcDxCcG1PcHRpb24+KCkuZ2xvYmFsRGF0YS5pc0NvbSxcbiAgfSxcbiAgLy8g5LqL5Lu25aSE55CG5Ye95pWwXG4gIGJpbmRNc2dIaWRlKCkge1xuICAgdGhpcy5zZXREYXRhKHtcbiAgICBtc2dTaG93IDogZmFsc2UsXG4gICB9KTtcbiAgfSxcblxuICBvblNob3dVc2VyKCkge1xuICAgIHRoaXMuc2V0RGF0YSh7XG4gICAgICBzaG93VXNlckRpYWxvZzogdHJ1ZVxuICAgIH0pO1xuICB9LFxuXG4gIG9uVXNlckNvbmZpcm0oKSB7XG4gICAgY29uc3QgdGhhdCA9IHRoaXM7XG4gICAgdGhpcy5zZWxlY3RDb21wb25lbnQoJyNmb3JtJykudmFsaWRhdGUoKHZhbGlkOiBhbnksIGVycm9yczogYW55KSA9PiB7XG4gICAgICBpZiAoIXZhbGlkKSB7XG4gICAgICAgIGNvbnN0IGZpcnN0RXJyb3IgPSBPYmplY3Qua2V5cyhlcnJvcnMpXG4gICAgICAgIGlmIChmaXJzdEVycm9yLmxlbmd0aCkge1xuICAgICAgICAgIHRoaXMuc2V0RGF0YSh7XG4gICAgICAgICAgICBlcnJvcjogZXJyb3JzW2ZpcnN0RXJyb3JbMF1dLm1lc3NhZ2VcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCB7dXNlciwgcHdkIH0gPSB0aGlzLmRhdGEuZm9ybURhdGE7XG4gICAgICAgIHRoYXQubG9naW4odXNlcixwd2QsIHRydWUpO1xuICAgICAgfVxuICAgIH0pXG4gIH0sXG5cbiAgc2V0RXJyb3IoZXJyTXNnOiBzdHJpbmcpIHtcbiAgICB0aGlzLnNldERhdGEoe1xuICAgICAgZXJyb3I6IGVyck1zZyxcbiAgICAgIG1zZ1Nob3c6IHRydWUsXG4gICAgfSk7XG4gIH0sXG5cbiAgZm9ybUlucHV0Q2hhbmdlKGU6IGFueSkge1xuICAgIGNvbnN0IHsgZmllbGQgfSA9IGUuY3VycmVudFRhcmdldC5kYXRhc2V0XG4gICAgdGhpcy5zZXREYXRhKHtcbiAgICAgIFtgZm9ybURhdGEuJHtmaWVsZH1gXTogZS5kZXRhaWwudmFsdWVcbiAgICB9KVxuICB9LFxuXG4gIGNvbUxvZ2luKCkge1xuICAgIGNvbnN0IHRoYXQgPSB0aGlzO1xuICAgIGNvbnN0IGFwcCA9IGdldEFwcDxCcG1PcHRpb24+KCk7XG4gICAgd3gucXkubG9naW4oe1xuICAgICAgc3VjY2VzczogZnVuY3Rpb24ocmVzOiB7IGNvZGU6IHN0cmluZzsgZXJyTXNnOiBzdHJpbmc7IH0pIHtcbiAgICAgICAgaWYgKHJlcy5jb2RlKSB7XG4gICAgICAgICAgLy/lj5HotbfnvZHnu5zor7fmsYJcbiAgICAgICAgICB3eFJlcXVlc3Qoe1xuICAgICAgICAgICAgdXJsOiBcImh0dHBzOi8vZGV2ZWxvcC5nem1wYy5jb20vYXBpL3dlY2hhdC92MS9jb20vY29kZTJTZXNzaW9uXCIsXG4gICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgYWdlbnRJZDogYXBwLmdsb2JhbERhdGEuYWdlbnRJZCxcbiAgICAgICAgICAgICAganNDb2RlOiByZXMuY29kZSxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgICAgIGlmIChyZXMuc3RhdHVzQ29kZSA9PSAyMDApIHtcbiAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gcmVzLmRhdGEgYXMgQXBpUmVzcG9uc2VEYXRhPFdlY2hhdE1pbmlwcm9ncmFtQ29tQ29kZTJTZXNzaW9uUmVzdWx0PjtcbiAgICAgICAgICAgICAgaWYocmVzdWx0ICYmIHJlc3VsdC5zdGF0dXMgJiYgcmVzdWx0LmRhdGEuZXJyY29kZSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNlc3Npb25EYXRhOiBDb21TZXNzaW9uRGF0YSA9IHsgLi4ucmVzdWx0LmRhdGEgfTsgXG4gICAgICAgICAgICAgICAgYXBwLmdsb2JhbERhdGEuY29tU2Vzc2lvbkRhdGEgPSBzZXNzaW9uRGF0YTtcblxuICAgICAgICAgICAgICAgIC8v5L+d5a2Y5Yiw57yT5a2Y5LitXG4gICAgICAgICAgICAgICAgd3guc2V0U3RvcmFnZVN5bmMoQ09OU1RBTlRfU0VTU0lPTkRBVEFfS0VZLCBzZXNzaW9uRGF0YSk7XG5cbiAgICAgICAgICAgICAgICB0aGF0LmxvZ2luKHNlc3Npb25EYXRhLnVzZXJpZCwgXCJtaW1hXCIpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcblxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCfnmbvlvZXlpLHotKXvvIEnICsgcmVzLmVyck1zZylcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9LFxuXG4gIGxvZ2luKHVzZXI6IHN0cmluZywgcHdkOiBzdHJpbmcsIGJpbmQ6IGJvb2xlYW4gPSBmYWxzZSkge1xuICAgIGNvbnN0IGFwcCA9IGdldEFwcDxCcG1PcHRpb24+KCk7XG4gICAgY29uc3QgdGhhdCA9IHRoaXM7XG4gICAgd3hSZXF1ZXN0KHtcbiAgICAgIGhlYWRlciA6IHtcbiAgICAgICAgJ2NvbnRlbnQtdHlwZScgOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJyxcbiAgICAgIH0sXG4gICAgICB1cmw6IFwiL2xvZ2luXCIsXG4gICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgdXNlcm5hbWU6IHVzZXIsXG4gICAgICAgIHBhc3N3b3JkOiBwd2RcbiAgICAgIH1cbiAgICB9KS50aGVuKChyZXMpID0+IHtcbiAgICAgIGlmKHJlcy5zdGF0dXNDb2RlID09IDIwMCkge1xuICAgICAgICBjb25zdCBkYXRhOmFueSAgPSByZXMuZGF0YTtcbiAgICAgICAgYXBwLnNldEFjY291bnRJbmZvKHVzZXIsIGRhdGEuZGF0YS50b2tlbik7XG4gICAgICAgIHd4LnN3aXRjaFRhYih7dXJsOiBcIi9wYWdlcy9saXN0L2xpc3RcIn0pO1xuXG4gICAgICAgIGlmKGJpbmQgJiYgIWFwcC5nbG9iYWxEYXRhLmlzQ29tKSB7XG4gICAgICAgICAgY29uc3Qgc2Vzc2lvbkRhdGEgPSBhcHAuZ2V0U2Vzc2lvbkNhY2hlKCk7XG4gICAgICAgICAgaWYoc2Vzc2lvbkRhdGEpIHtcbiAgICAgICAgICAgIHd4UmVxdWVzdCh7XG4gICAgICAgICAgICAgIHVybDogXCJodHRwczovL2RldmVsb3AuZ3ptcGMuY29tL2FwaS93ZWNoYXQvdjEvd2VjaGF0L2JpbmRPcGVuSWRcIixcbiAgICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICB1YWNjb3VudDogdXNlcixcbiAgICAgICAgICAgICAgICBvcGVuaWQ6IHNlc3Npb25EYXRhLm9wZW5pZFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgICAgICAgaWYocmVzLnN0YXR1c0NvZGUgPT0gMjAwKSB7XG4gICAgICAgICAgICAgICAgLy8gY29uc3QgZGF0YTphbnkgID0gcmVzLmRhdGE7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHRoYXQuc2V0RXJyb3IocmVzLmVyck1zZyk7XG4gICAgICB9XG4gICAgfSlcbiAgICAuY2F0Y2goKHJlczogV2VjaGF0TWluaXByb2dyYW0uR2VuZXJhbENhbGxiYWNrUmVzdWx0KSA9PiB7XG4gICAgICB0aGF0LnNldEVycm9yKHJlcy5lcnJNc2cpO1xuICAgIH0pO1xuICB9LFxuXG4gIG9uTG9hZChvcHRpb246IGFueSkge1xuICAgIGNvbnN0IHsgYXV0byB9ID0gb3B0aW9uO1xuICAgIGNvbnN0IHsgYXBwIH0gPSB0aGlzO1xuICAgIGNvbnN0IHRoYXQgPSB0aGlzO1xuXG4gICAgaWYoIWFwcC5nbG9iYWxEYXRhLmlzQ29tKSB7XG4gICAgICBjb25zdCBzZXNzaW9uRGF0YSA9IGFwcC5nZXRTZXNzaW9uQ2FjaGUoKTtcbiAgICAgIGlmKHNlc3Npb25EYXRhICYmICFhdXRvKSB7XG4gICAgICAgIHd4UmVxdWVzdCh7XG4gICAgICAgICAgdXJsOiBgaHR0cHM6Ly9kZXZlbG9wLmd6bXBjLmNvbS9hcGkvd2VjaGF0L3YxL3dlY2hhdC9nZXRVYWNjb3VudEJ5T3BlbklkLyR7c2Vzc2lvbkRhdGEub3BlbmlkfWAsXG4gICAgICAgIH0pLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICAgIGlmKHJlcy5zdGF0dXNDb2RlID09IDIwMCkge1xuICAgICAgICAgICAgY29uc3QgZGF0YSAgPSByZXMuZGF0YSBhcyBBcGlSZXNwb25zZURhdGE8c3RyaW5nPjtcbiAgICAgICAgICAgIGlmKGRhdGEgJiYgZGF0YS5zdGF0dXMpIHtcbiAgICAgICAgICAgICAgdGhhdC5sb2dpbihkYXRhLmRhdGEsIFwibWltYVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHd4LnF5LmNoZWNrU2Vzc2lvbih7XG4gICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgLy9zZXNzaW9uX2tleSDmnKrov4fmnJ/vvIzlubbkuJTlnKjmnKznlJ/lkb3lkajmnJ/kuIDnm7TmnInmlYhcbiAgICAgICAgICBjb25zdCBzZXNzaW9uRGF0YSA9IGFwcC5nZXRDb21TZXNzaW9uQ2FjaGUoKTtcbiAgICAgICAgICBpZihzZXNzaW9uRGF0YSkge1xuICAgICAgICAgICAgdGhhdC5sb2dpbihzZXNzaW9uRGF0YS51c2VyaWQsIFwibWltYVwiKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhhdC5jb21Mb2dpbigpO1xuICAgICAgICB9LFxuICAgICAgICBmYWlsOiBmdW5jdGlvbigpe1xuICAgICAgICAgIC8vIHNlc3Npb25fa2V5IOW3sue7j+WkseaViO+8jOmcgOimgemHjeaWsOaJp+ihjOeZu+W9lea1geeoi1xuICAgICAgICAgIHRoYXQuY29tTG9naW4oKTtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG4gIH0sXG4gIGdldFVzZXJJbmZvKGU6IGFueSkge1xuICAgIGNvbnN0IGFwcCA9IGdldEFwcDxCcG1PcHRpb24+KCk7XG4gICAgYXBwLmdsb2JhbERhdGEudXNlckluZm8gPSBlLmRldGFpbC51c2VySW5mbztcbiAgICB0aGlzLm9uVXNlckNvbmZpcm0oKTtcbiAgfSxcbiAgZ2V0UGhvbmVOdW1iZXIoZTogYW55KSB7XG4gICAgY29uc3QgeyBhcHAgfSA9IHRoaXM7XG4gICAgY29uc3QgdGhhdCA9IHRoaXM7XG4gICAgd3guY2hlY2tTZXNzaW9uKHtcbiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgICAgY29uc29sZS5sb2cocmVzKTtcbiAgICAgICAgdmFyIGVuY3kgPSBlLmRldGFpbC5lbmNyeXB0ZWREYXRhO1xuICAgICAgICB2YXIgaXYgPSBlLmRldGFpbC5pdjtcbiAgICAgICAgdmFyIHNlc3Npb25rID0gdGhhdC5kYXRhLnNlc3Npb25LZXk7XG4gICAgICAgIGNvbnNvbGUubG9nKCdzZXNzaW9uIGRhdGE6ICcsIGUsIGVuY3ksIGl2LCBzZXNzaW9uayk7XG4gICAgICAgIGNvbnN0IGVyck1zZzpzdHJpbmcgPSBlLmRldGFpbC5lcnJNc2c7XG4gICAgICAgIGlmIChlcnJNc2cgJiYgZXJyTXNnLnN0YXJ0c1dpdGgoJ2dldFBob25lTnVtYmVyOmZhaWwnKSkge1xuICAgICAgICAgIHRoYXQuc2V0RGF0YSh7XG4gICAgICAgICAgICBtb2RhbHN0YXR1czogdHJ1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgeyAvL+WQjOaEj+aOiOadg1xuICAgICAgICAgIGNvbnN0IHBjID0gbmV3IFdYQml6RGF0YUNyeXB0KGFwcC5nbG9iYWxEYXRhLmFwcElkLCBzZXNzaW9uayk7XG5cbiAgICAgICAgICB2YXIgZGF0YSA9IHBjLmRlY3J5cHREYXRhKGVuY3kgLCBpdilcbiAgICAgICAgICBjb25zb2xlLmxvZygn6Kej5a+G5ZCOIGRhdGE6ICcsIGRhdGEpXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBmYWlsOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwic2Vzc2lvbl9rZXkg5bey57uP5aSx5pWI77yM6ZyA6KaB6YeN5paw5omn6KGM55m75b2V5rWB56iLXCIpO1xuICAgICAgICAvLyB0aGF0Lnd4bG9naW4oKTsgLy/ph43mlrDnmbvlvZVcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufSlcbiJdfQ==