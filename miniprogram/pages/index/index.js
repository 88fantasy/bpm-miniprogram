import { wxRequest } from '../../utils/request';
const WXBizDataCrypt = require('../../utils/RdWXBizDataCrypt');
Page({
    app: getApp(),
    data: {
        sessionKey: "",
        userInfo: {},
        hasUserInfo: false,
        canIUse: wx.canIUse('button.open-type.getUserInfo'),
        showUserDialog: false,
        rules: [{
                name: 'user',
                rules: { required: true, message: '帐号必填' },
            }, {
                name: 'pwd',
                rules: { required: true, message: '密码必填' },
            }],
        confirmButton: [{ text: '确定' }],
        formData: {
            user: "",
            pwd: ""
        }
    },
    bindViewTap() {
        wx.navigateTo({
            url: '../logs/logs',
        });
    },
    onShowUser() {
        this.setData({
            showUserDialog: true
        });
    },
    onUserConfirm() {
        const that = this;
        this.selectComponent('#form').validate((valid, errors) => {
            if (!valid) {
                const firstError = Object.keys(errors);
                if (firstError.length) {
                    this.setData({
                        error: errors[firstError[0]].message
                    });
                }
            }
            else {
                const { user, pwd } = this.data.formData;
                that.login(user, pwd);
            }
        });
    },
    setError(errMsg) {
        this.setData({
            error: errMsg
        });
    },
    onUserCancel() {
        this.setData({
            showUserDialog: false
        });
    },
    formInputChange(e) {
        const { field } = e.currentTarget.dataset;
        this.setData({
            [`formData.${field}`]: e.detail.value
        });
    },
    login(user, pwd) {
        const app = getApp();
        const that = this;
        wxRequest({
            header: {
                'content-type': 'application/x-www-form-urlencoded',
            },
            url: "/login",
            method: 'POST',
            data: {
                username: user,
                password: pwd
            }
        }).then((res) => {
            if (res.statusCode == 200) {
                const data = res.data;
                app.setToken(data.data.token);
                that.onUserCancel();
                wx.switchTab({ url: "/pages/dashboard/dashboard" });
                const sessionData = app.getSessionCache();
                if (sessionData) {
                    wxRequest({
                        url: "https://wechat-api.gzmpc.com/v1/wechat/bindOpenId",
                        method: 'POST',
                        data: {
                            uaccount: user,
                            openid: sessionData.openid
                        }
                    }).then((res) => {
                        if (res.statusCode == 200) {
                        }
                    });
                }
            }
            else {
                that.setError(res.errMsg);
            }
        })
            .catch((res) => {
            that.setError(res.errMsg);
        });
    },
    onLoad() {
        const { app } = this;
        const that = this;
        const sessionData = app.getSessionCache();
        if (sessionData) {
            wxRequest({
                url: `https://wechat-api.gzmpc.com/v1/wechat/getUaccountByOpenId/${sessionData.openid}`,
            }).then((res) => {
                if (res.statusCode == 200) {
                    const data = res.data;
                    if (data && data.errcode == 0) {
                        that.login(data.uaccount, "mima");
                    }
                }
            });
        }
        if (app.globalData.userInfo) {
            this.setData({
                userInfo: app.globalData.userInfo,
                hasUserInfo: true,
            });
        }
        else if (this.data.canIUse) {
            app.userInfoReadyCallback = (res) => {
                this.setData({
                    userInfo: res.userInfo,
                    hasUserInfo: true,
                });
            };
        }
        else {
            wx.getUserInfo({
                success: res => {
                    app.globalData.userInfo = res.userInfo;
                    this.setData({
                        userInfo: res.userInfo,
                        hasUserInfo: true,
                    });
                },
            });
        }
    },
    getUserInfo(e) {
        const app = getApp();
        app.globalData.userInfo = e.detail.userInfo;
        this.setData({
            userInfo: e.detail.userInfo,
            hasUserInfo: true,
        });
    },
    getPhoneNumber(e) {
        const { app } = this;
        const that = this;
        wx.checkSession({
            success: function (res) {
                console.log(res);
                var ency = e.detail.encryptedData;
                var iv = e.detail.iv;
                var sessionk = that.data.sessionKey;
                console.log('session data: ', e, ency, iv, sessionk);
                const errMsg = e.detail.errMsg;
                if (errMsg && errMsg.startsWith('getPhoneNumber:fail')) {
                    that.setData({
                        modalstatus: true
                    });
                }
                else {
                    const pc = new WXBizDataCrypt(app.globalData.appId, sessionk);
                    var data = pc.decryptData(ency, iv);
                    console.log('解密后 data: ', data);
                }
            },
            fail: function () {
                console.log("session_key 已经失效，需要重新执行登录流程");
            }
        });
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFHaEQsTUFBTSxjQUFjLEdBQUcsT0FBTyxDQUFDLDhCQUE4QixDQUFDLENBQUM7QUFFL0QsSUFBSSxDQUFDO0lBQ0gsR0FBRyxFQUFFLE1BQU0sRUFBYTtJQUN4QixJQUFJLEVBQUU7UUFDSixVQUFVLEVBQUUsRUFBRTtRQUNkLFFBQVEsRUFBRSxFQUFFO1FBQ1osV0FBVyxFQUFFLEtBQUs7UUFDbEIsT0FBTyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsOEJBQThCLENBQUM7UUFDbkQsY0FBYyxFQUFFLEtBQUs7UUFFckIsS0FBSyxFQUFFLENBQUM7Z0JBQ04sSUFBSSxFQUFFLE1BQU07Z0JBQ1osS0FBSyxFQUFFLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFO2FBQzNDLEVBQUU7Z0JBQ0QsSUFBSSxFQUFFLEtBQUs7Z0JBQ1gsS0FBSyxFQUFFLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFO2FBQzNDLENBQUM7UUFDRixhQUFhLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQztRQUMvQixRQUFRLEVBQUU7WUFDUixJQUFJLEVBQUUsRUFBRTtZQUNSLEdBQUcsRUFBRSxFQUFFO1NBQ1I7S0FDRjtJQUVELFdBQVc7UUFDVCxFQUFFLENBQUMsVUFBVSxDQUFDO1lBQ1osR0FBRyxFQUFFLGNBQWM7U0FDcEIsQ0FBQyxDQUFBO0lBQ0osQ0FBQztJQUVELFVBQVU7UUFDUixJQUFJLENBQUMsT0FBTyxDQUFDO1lBQ1gsY0FBYyxFQUFFLElBQUk7U0FDckIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELGFBQWE7UUFDWCxNQUFNLElBQUksR0FBRyxJQUFJLENBQUM7UUFDbEIs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LENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsUUFBUSxDQUFDLENBQUM7Z0JBQ3JELE1BQU0sTUFBTSxHQUFVLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO2dCQUN0QyxJQUFJLE1BQU0sSUFBSSxNQUFNLENBQUMsVUFBVSxDQUFDLHFCQUFxQixDQUFDLEVBQUU7b0JBQ3RELElBQUksQ0FBQyxPQUFPLENBQUM7d0JBQ1gsV0FBVyxFQUFFLElBQUk7cUJBQ2xCLENBQUMsQ0FBQztpQkFDSjtxQkFBTTtvQkFDTCxNQUFNLEVBQUUsR0FBRyxJQUFJLGNBQWMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQztvQkFFOUQsSUFBSSxJQUFJLEdBQUcsRUFBRSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUcsRUFBRSxDQUFDLENBQUE7b0JBQ3BDLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxDQUFBO2lCQUNoQztZQUNILENBQUM7WUFDRCxJQUFJLEVBQUU7Z0JBQ0osT0FBTyxDQUFDLEdBQUcsQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO1lBRTdDLENBQUM7U0FDRixDQUFDLENBQUM7SUFDTCxDQUFDO0NBQ0YsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLy8gaW5kZXgudHNcbmltcG9ydCB7IHd4UmVxdWVzdCB9IGZyb20gJy4uLy4uL3V0aWxzL3JlcXVlc3QnO1xuXG5cbmNvbnN0IFdYQml6RGF0YUNyeXB0ID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvUmRXWEJpekRhdGFDcnlwdCcpO1xuXG5QYWdlKHtcbiAgYXBwOiBnZXRBcHA8QnBtT3B0aW9uPigpLFxuICBkYXRhOiB7XG4gICAgc2Vzc2lvbktleTogXCJcIixcbiAgICB1c2VySW5mbzoge30sXG4gICAgaGFzVXNlckluZm86IGZhbHNlLFxuICAgIGNhbklVc2U6IHd4LmNhbklVc2UoJ2J1dHRvbi5vcGVuLXR5cGUuZ2V0VXNlckluZm8nKSxcbiAgICBzaG93VXNlckRpYWxvZzogZmFsc2UsXG5cbiAgICBydWxlczogW3tcbiAgICAgIG5hbWU6ICd1c2VyJyxcbiAgICAgIHJ1bGVzOiB7IHJlcXVpcmVkOiB0cnVlLCBtZXNzYWdlOiAn5biQ5Y+35b+F5aGrJyB9LFxuICAgIH0sIHtcbiAgICAgIG5hbWU6ICdwd2QnLFxuICAgICAgcnVsZXM6IHsgcmVxdWlyZWQ6IHRydWUsIG1lc3NhZ2U6ICflr4bnoIHlv4XloasnIH0sXG4gICAgfV0sXG4gICAgY29uZmlybUJ1dHRvbjogW3sgdGV4dDogJ+ehruWumicgfV0sXG4gICAgZm9ybURhdGE6IHtcbiAgICAgIHVzZXI6IFwiXCIsXG4gICAgICBwd2Q6IFwiXCJcbiAgICB9XG4gIH0sXG4gIC8vIOS6i+S7tuWkhOeQhuWHveaVsFxuICBiaW5kVmlld1RhcCgpIHtcbiAgICB3eC5uYXZpZ2F0ZVRvKHtcbiAgICAgIHVybDogJy4uL2xvZ3MvbG9ncycsXG4gICAgfSlcbiAgfSxcblxuICBvblNob3dVc2VyKCkge1xuICAgIHRoaXMuc2V0RGF0YSh7XG4gICAgICBzaG93VXNlckRpYWxvZzogdHJ1ZVxuICAgIH0pO1xuICB9LFxuXG4gIG9uVXNlckNvbmZpcm0oKSB7XG4gICAgY29uc3QgdGhhdCA9IHRoaXM7XG4gICAgdGhpcy5zZWxlY3RDb21wb25lbnQoJyNmb3JtJykudmFsaWRhdGUoKHZhbGlkOiBhbnksIGVycm9yczogYW55KSA9PiB7XG4gICAgICBpZiAoIXZhbGlkKSB7XG4gICAgICAgIGNvbnN0IGZpcnN0RXJyb3IgPSBPYmplY3Qua2V5cyhlcnJvcnMpXG4gICAgICAgIGlmIChmaXJzdEVycm9yLmxlbmd0aCkge1xuICAgICAgICAgIHRoaXMuc2V0RGF0YSh7XG4gICAgICAgICAgICBlcnJvcjogZXJyb3JzW2ZpcnN0RXJyb3JbMF1dLm1lc3NhZ2VcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCB7dXNlciwgcHdkIH0gPSB0aGlzLmRhdGEuZm9ybURhdGE7XG4gICAgICAgIHRoYXQubG9naW4odXNlcixwd2QpO1xuICAgICAgfVxuICAgIH0pXG4gIH0sXG5cbiAgc2V0RXJyb3IoZXJyTXNnOiBzdHJpbmcpIHtcbiAgICB0aGlzLnNldERhdGEoe1xuICAgICAgZXJyb3I6IGVyck1zZ1xuICAgIH0pO1xuICB9LFxuXG4gIG9uVXNlckNhbmNlbCgpIHtcbiAgICB0aGlzLnNldERhdGEoe1xuICAgICAgc2hvd1VzZXJEaWFsb2c6IGZhbHNlXG4gICAgfSlcbiAgfSxcblxuICBmb3JtSW5wdXRDaGFuZ2UoZTogYW55KSB7XG4gICAgY29uc3QgeyBmaWVsZCB9ID0gZS5jdXJyZW50VGFyZ2V0LmRhdGFzZXRcbiAgICB0aGlzLnNldERhdGEoe1xuICAgICAgW2Bmb3JtRGF0YS4ke2ZpZWxkfWBdOiBlLmRldGFpbC52YWx1ZVxuICAgIH0pXG4gIH0sXG5cbiAgbG9naW4odXNlcjogc3RyaW5nLCBwd2Q6IHN0cmluZykge1xuICAgIGNvbnN0IGFwcCA9IGdldEFwcDxCcG1PcHRpb24+KCk7XG4gICAgY29uc3QgdGhhdCA9IHRoaXM7XG4gICAgd3hSZXF1ZXN0KHtcbiAgICAgIGhlYWRlciA6IHtcbiAgICAgICAgJ2NvbnRlbnQtdHlwZScgOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJyxcbiAgICAgIH0sXG4gICAgICB1cmw6IFwiL2xvZ2luXCIsXG4gICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgdXNlcm5hbWU6IHVzZXIsXG4gICAgICAgIHBhc3N3b3JkOiBwd2RcbiAgICAgIH1cbiAgICB9KS50aGVuKChyZXMpID0+IHtcbiAgICAgIGlmKHJlcy5zdGF0dXNDb2RlID09IDIwMCkge1xuICAgICAgICBjb25zdCBkYXRhOmFueSAgPSByZXMuZGF0YTtcbiAgICAgICAgYXBwLnNldFRva2VuKGRhdGEuZGF0YS50b2tlbik7XG4gICAgICAgIHRoYXQub25Vc2VyQ2FuY2VsKCk7XG4gICAgICAgIHd4LnN3aXRjaFRhYih7dXJsOiBcIi9wYWdlcy9kYXNoYm9hcmQvZGFzaGJvYXJkXCJ9KTtcblxuICAgICAgICBjb25zdCBzZXNzaW9uRGF0YSA9IGFwcC5nZXRTZXNzaW9uQ2FjaGUoKTtcbiAgICAgICAgaWYoc2Vzc2lvbkRhdGEpIHtcbiAgICAgICAgICB3eFJlcXVlc3Qoe1xuICAgICAgICAgICAgdXJsOiBcImh0dHBzOi8vd2VjaGF0LWFwaS5nem1wYy5jb20vdjEvd2VjaGF0L2JpbmRPcGVuSWRcIixcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICB1YWNjb3VudDogdXNlcixcbiAgICAgICAgICAgICAgb3BlbmlkOiBzZXNzaW9uRGF0YS5vcGVuaWRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgICAgIGlmKHJlcy5zdGF0dXNDb2RlID09IDIwMCkge1xuICAgICAgICAgICAgICAvLyBjb25zdCBkYXRhOmFueSAgPSByZXMuZGF0YTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHRoYXQuc2V0RXJyb3IocmVzLmVyck1zZyk7XG4gICAgICB9XG4gICAgfSlcbiAgICAuY2F0Y2goKHJlczogV2VjaGF0TWluaXByb2dyYW0uR2VuZXJhbENhbGxiYWNrUmVzdWx0KSA9PiB7XG4gICAgICB0aGF0LnNldEVycm9yKHJlcy5lcnJNc2cpO1xuICAgIH0pO1xuICB9LFxuXG4gIG9uTG9hZCgpIHtcbiAgICBjb25zdCB7IGFwcCB9ID0gdGhpcztcbiAgICBjb25zdCB0aGF0ID0gdGhpcztcblxuICAgIGNvbnN0IHNlc3Npb25EYXRhID0gYXBwLmdldFNlc3Npb25DYWNoZSgpO1xuICAgIGlmKHNlc3Npb25EYXRhKSB7XG4gICAgICB3eFJlcXVlc3Qoe1xuICAgICAgICB1cmw6IGBodHRwczovL3dlY2hhdC1hcGkuZ3ptcGMuY29tL3YxL3dlY2hhdC9nZXRVYWNjb3VudEJ5T3BlbklkLyR7c2Vzc2lvbkRhdGEub3BlbmlkfWAsXG4gICAgICB9KS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgaWYocmVzLnN0YXR1c0NvZGUgPT0gMjAwKSB7XG4gICAgICAgICAgY29uc3QgZGF0YTphbnkgID0gcmVzLmRhdGE7XG4gICAgICAgICAgaWYoZGF0YSAmJiBkYXRhLmVycmNvZGUgPT0gMCkge1xuICAgICAgICAgICAgdGhhdC5sb2dpbihkYXRhLnVhY2NvdW50LCBcIm1pbWFcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoYXBwLmdsb2JhbERhdGEudXNlckluZm8pIHtcbiAgICAgIHRoaXMuc2V0RGF0YSh7XG4gICAgICAgIHVzZXJJbmZvOiBhcHAuZ2xvYmFsRGF0YS51c2VySW5mbyxcbiAgICAgICAgaGFzVXNlckluZm86IHRydWUsXG4gICAgICB9KVxuICAgIH0gZWxzZSBpZiAodGhpcy5kYXRhLmNhbklVc2UpIHtcbiAgICAgIC8vIOeUseS6jiBnZXRVc2VySW5mbyDmmK/nvZHnu5zor7fmsYLvvIzlj6/og73kvJrlnKggUGFnZS5vbkxvYWQg5LmL5ZCO5omN6L+U5ZueXG4gICAgICAvLyDmiYDku6XmraTlpITliqDlhaUgY2FsbGJhY2sg5Lul6Ziy5q2i6L+Z56eN5oOF5Ya1XG4gICAgICBhcHAudXNlckluZm9SZWFkeUNhbGxiYWNrID0gKHJlczogYW55KSA9PiB7XG4gICAgICAgIHRoaXMuc2V0RGF0YSh7XG4gICAgICAgICAgdXNlckluZm86IHJlcy51c2VySW5mbyxcbiAgICAgICAgICBoYXNVc2VySW5mbzogdHJ1ZSxcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8g5Zyo5rKh5pyJIG9wZW4tdHlwZT1nZXRVc2VySW5mbyDniYjmnKznmoTlhbzlrrnlpITnkIZcbiAgICAgIHd4LmdldFVzZXJJbmZvKHtcbiAgICAgICAgc3VjY2VzczogcmVzID0+IHtcbiAgICAgICAgICBhcHAuZ2xvYmFsRGF0YS51c2VySW5mbyA9IHJlcy51c2VySW5mb1xuICAgICAgICAgIHRoaXMuc2V0RGF0YSh7XG4gICAgICAgICAgICB1c2VySW5mbzogcmVzLnVzZXJJbmZvLFxuICAgICAgICAgICAgaGFzVXNlckluZm86IHRydWUsXG4gICAgICAgICAgfSlcbiAgICAgICAgfSxcbiAgICAgIH0pXG4gICAgfVxuICB9LFxuICBnZXRVc2VySW5mbyhlOiBhbnkpIHtcbiAgICBjb25zdCBhcHAgPSBnZXRBcHA8QnBtT3B0aW9uPigpO1xuICAgIGFwcC5nbG9iYWxEYXRhLnVzZXJJbmZvID0gZS5kZXRhaWwudXNlckluZm9cbiAgICB0aGlzLnNldERhdGEoe1xuICAgICAgdXNlckluZm86IGUuZGV0YWlsLnVzZXJJbmZvLFxuICAgICAgaGFzVXNlckluZm86IHRydWUsXG4gICAgfSlcbiAgfSxcbiAgZ2V0UGhvbmVOdW1iZXIoZTogYW55KSB7XG4gICAgY29uc3QgeyBhcHAgfSA9IHRoaXM7XG4gICAgY29uc3QgdGhhdCA9IHRoaXM7XG4gICAgd3guY2hlY2tTZXNzaW9uKHtcbiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgICAgY29uc29sZS5sb2cocmVzKTtcbiAgICAgICAgdmFyIGVuY3kgPSBlLmRldGFpbC5lbmNyeXB0ZWREYXRhO1xuICAgICAgICB2YXIgaXYgPSBlLmRldGFpbC5pdjtcbiAgICAgICAgdmFyIHNlc3Npb25rID0gdGhhdC5kYXRhLnNlc3Npb25LZXk7XG4gICAgICAgIGNvbnNvbGUubG9nKCdzZXNzaW9uIGRhdGE6ICcsIGUsIGVuY3ksIGl2LCBzZXNzaW9uayk7XG4gICAgICAgIGNvbnN0IGVyck1zZzpzdHJpbmcgPSBlLmRldGFpbC5lcnJNc2c7XG4gICAgICAgIGlmIChlcnJNc2cgJiYgZXJyTXNnLnN0YXJ0c1dpdGgoJ2dldFBob25lTnVtYmVyOmZhaWwnKSkge1xuICAgICAgICAgIHRoYXQuc2V0RGF0YSh7XG4gICAgICAgICAgICBtb2RhbHN0YXR1czogdHJ1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgeyAvL+WQjOaEj+aOiOadg1xuICAgICAgICAgIGNvbnN0IHBjID0gbmV3IFdYQml6RGF0YUNyeXB0KGFwcC5nbG9iYWxEYXRhLmFwcElkLCBzZXNzaW9uayk7XG5cbiAgICAgICAgICB2YXIgZGF0YSA9IHBjLmRlY3J5cHREYXRhKGVuY3kgLCBpdilcbiAgICAgICAgICBjb25zb2xlLmxvZygn6Kej5a+G5ZCOIGRhdGE6ICcsIGRhdGEpXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBmYWlsOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwic2Vzc2lvbl9rZXkg5bey57uP5aSx5pWI77yM6ZyA6KaB6YeN5paw5omn6KGM55m75b2V5rWB56iLXCIpO1xuICAgICAgICAvLyB0aGF0Lnd4bG9naW4oKTsgLy/ph43mlrDnmbvlvZVcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufSlcbiJdfQ==