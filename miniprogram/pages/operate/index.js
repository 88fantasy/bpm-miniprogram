import { approve, stop, reject, abolish, reply, sign, communicate, send, } from '../../services/assapi';
Page({
    app: getApp(),
    data: {
        comment: '',
        oper: '',
        node: '',
        rowData: {
            id: '',
            categoryid: '',
            isNeedApprover: 0,
        },
        msgShow: false,
        msgInfo: {
            type: '',
            title: '',
            desc: '',
        },
        toAccount: [],
        isCom: getApp().globalData.isCom,
    },
    onAppendComment(e) {
        const { dataset: { text } } = e.target;
        const { comment } = this.data;
        const newComment = comment.concat(text);
        this.setData({
            comment: newComment,
        });
    },
    onNodeChange(event) {
        this.setData({
            node: event.detail,
        });
    },
    onAccountChange(event) {
        this.setData({
            toAccount: event.detail,
        });
    },
    onRadioClick(event) {
        const { name } = event.currentTarget.dataset;
        this.setData({
            node: name,
        });
    },
    onAccountClick(_event) {
        const that = this;
        const { app } = that;
        if (app.globalData.isCom) {
            const accountList = that.data.toAccount;
            const selectedList = accountList.map(account => account.uaccount);
            wx.qy.selectEnterpriseContact({
                fromDepartmentId: -1,
                mode: "single",
                type: ["user"],
                selectedUserIds: selectedList,
                success: function (res) {
                    const newList = [];
                    var selectedUserList = res.result.userList;
                    for (var i = 0; i < selectedUserList.length; i++) {
                        const user = selectedUserList[i];
                        const userId = user.id;
                        const userName = user.name;
                        newList.push({
                            uaccount: userId,
                            accountName: userName,
                        });
                    }
                    that.setData({
                        toAccount: newList,
                    });
                }
            });
        }
    },
    onApproveClick() {
        const that = this;
        const { rowData, comment, node, toAccount, } = that.data;
        if (rowData) {
            if (rowData.isNeedApprover === 1 && toAccount.length === 0) {
                that.operateFail({
                    message: '必须选择发送对象',
                });
            }
            else {
                const request = {
                    approvalId: rowData.id,
                    categoryid: rowData.categoryid,
                    comment: `${comment} (来自:微信小程序)`,
                };
                if (node && node !== '') {
                    Object.assign(request, {
                        nextNode: node
                    });
                }
                if (toAccount.length > 0) {
                    Object.assign(request, {
                        nextApprovalUaccount: toAccount[0].uaccount,
                    });
                }
                approve(request).then(that.operateSuccess)
                    .catch(that.operateFail);
            }
        }
    },
    onRejectClick() {
        const that = this;
        const { rowData, comment, node } = that.data;
        if (rowData) {
            const request = {
                approvalId: rowData.id,
                categoryid: rowData.categoryid,
                comment: `${comment} (来自:微信小程序)`,
            };
            if (node && node !== '') {
                Object.assign(request, {
                    rejectNode: node
                });
            }
            reject(request).then(that.operateSuccess)
                .catch(that.operateFail);
        }
    },
    onStopClick() {
        const that = this;
        const { rowData, comment, } = that.data;
        if (rowData) {
            stop({
                approvalId: rowData.id,
                categoryid: rowData.categoryid,
                comment: `${comment} (来自:微信小程序)`,
            }).then(that.operateSuccess)
                .catch(that.operateFail);
        }
    },
    onSendClick() {
        const that = this;
        const { rowData, comment, toAccount, } = that.data;
        if (toAccount.length === 0) {
            that.operateFail({
                message: '必须选择发送对象',
            });
        }
        if (rowData) {
            send({
                approvalId: rowData.id,
                categoryid: rowData.categoryid,
                comment: `${comment} (来自:微信小程序)`,
                staff: toAccount[0].uaccount || '',
            }).then(that.operateSuccess)
                .catch(that.operateFail);
        }
    },
    onCommunicateClick() {
        const that = this;
        const { rowData, comment, toAccount, } = that.data;
        if (toAccount.length === 0) {
            that.operateFail({
                message: '必须选择发送对象',
            });
        }
        if (rowData) {
            communicate({
                approvalId: rowData.id,
                categoryid: rowData.categoryid,
                comment: `${comment} (来自:微信小程序)`,
                staff: toAccount[0].uaccount || '',
            }).then(that.operateSuccess)
                .catch(that.operateFail);
        }
    },
    onSignClick() {
        const that = this;
        const { rowData, comment, } = that.data;
        if (rowData) {
            sign({
                approvalId: rowData.id,
                comment: `${comment} (来自:微信小程序)`,
            }).then(that.operateSuccess)
                .catch(that.operateFail);
        }
    },
    onAbolishClick() {
        const that = this;
        const { rowData, comment, } = that.data;
        if (rowData) {
            abolish({
                approvalId: rowData.id,
                comment: `${comment} (来自:微信小程序)`,
            }).then(that.operateSuccess)
                .catch(that.operateFail);
        }
    },
    onReplyClick() {
        const that = this;
        const { rowData, comment, } = that.data;
        if (rowData) {
            reply({
                approvalId: rowData.id,
                comment: `${comment} (来自:微信小程序)`,
            }).then(that.operateSuccess)
                .catch(that.operateFail);
        }
    },
    operateSuccess(res) {
        const data = res.data;
        if (res.statusCode === 200) {
            if (data.status == 200) {
                wx.navigateBack({
                    delta: 2,
                });
            }
            else {
                this.operateFail({
                    message: data.errorMessage,
                });
            }
        }
        else {
            this.operateFail({
                message: data.message,
            });
        }
    },
    operateFail(res) {
        this.setData({
            msgShow: true,
            msgInfo: {
                type: 'error',
                title: '操作失败',
                desc: res.message,
            },
        });
    },
    bindMsgHide() {
        this.setData({
            msgShow: false,
        });
    },
    onLoad: function () {
        const that = this;
        const eventChannel = this.getOpenerEventChannel();
        eventChannel.on('acceptDataFromOpenerPage', function (data) {
            const { rowData, oper } = data;
            let node = '';
            if (oper === 'approve') {
                node = rowData && rowData.nextNode && rowData.nextNode.length > 0 ? rowData.nextNode[0].id : '';
            }
            else if (oper === 'reject') {
                node = rowData && rowData.rejectNode && rowData.rejectNode.length > 0 ? rowData.rejectNode[0].id : '';
            }
            that.setData({
                rowData,
                oper,
                node,
            });
        });
    },
    onReady: function () {
    },
    onShow: function () {
    },
    onHide: function () {
    },
    onUnload: function () {
    },
    onPullDownRefresh: function () {
    },
    onReachBottom: function () {
    }
});
//# sourceMappingURL=data:application/json;base64,