import { approve, stop, reject, abolish, reply, sign } from '../../services/assapi';
Page({
    app: getApp(),
    data: {
        comment: '',
        oper: '',
        rowData: {
            id: '',
            categoryid: '',
        },
        msgShow: false,
        msgInfo: {
            type: '',
            title: '',
            desc: '',
        }
    },
    onAppenfComment(e) {
        const { dataset: { text } } = e.target;
        const { comment } = this.data;
        const newComment = comment.concat(text);
        this.setData({
            comment: newComment,
        });
    },
    onApproveClick() {
        const that = this;
        const { rowData, comment, } = that.data;
        if (rowData) {
            approve({
                approvalId: rowData.id,
                categoryid: rowData.categoryid,
                comment: `${comment} (来自:微信小程序)`,
            }).then(that.operateSuccess)
                .catch(that.operateFail);
        }
    },
    onRejectClick() {
        const that = this;
        const { rowData, comment, } = that.data;
        if (rowData) {
            reject({
                approvalId: rowData.id,
                categoryid: rowData.categoryid,
                comment: `${comment} (来自:微信小程序)`,
            }).then(that.operateSuccess)
                .catch(that.operateFail);
        }
    },
    onStopClick() {
        const that = this;
        const { rowData, comment, } = that.data;
        if (rowData) {
            stop({
                approvalId: rowData.id,
                categoryid: rowData.categoryid,
                comment: `${comment} (来自:微信小程序)`,
            }).then(that.operateSuccess)
                .catch(that.operateFail);
        }
    },
    onSignClick() {
        const that = this;
        const { rowData, comment, } = that.data;
        if (rowData) {
            sign({
                approvalId: rowData.id,
                comment: `${comment} (来自:微信小程序)`,
            }).then(that.operateSuccess)
                .catch(that.operateFail);
        }
    },
    onAbolishClick() {
        const that = this;
        const { rowData, comment, } = that.data;
        if (rowData) {
            abolish({
                approvalId: rowData.id,
                comment: `${comment} (来自:微信小程序)`,
            }).then(that.operateSuccess)
                .catch(that.operateFail);
        }
    },
    onReplyClick() {
        const that = this;
        const { rowData, comment, } = that.data;
        if (rowData) {
            reply({
                approvalId: rowData.id,
                comment: `${comment} (来自:微信小程序)`,
            }).then(that.operateSuccess)
                .catch(that.operateFail);
        }
    },
    operateSuccess(res) {
        const data = res.data;
        if (res.statusCode === 200) {
            if (data.status == 200) {
                wx.navigateBack({
                    delta: 2,
                });
            }
            else {
                this.operateFail({
                    message: data.errorMessage,
                });
            }
        }
        else {
            this.operateFail({
                message: data.message,
            });
        }
    },
    operateFail(res) {
        this.setData({
            msgShow: true,
            msgInfo: {
                type: 'error',
                title: '操作失败',
                desc: res.message,
            },
        });
    },
    bindMsgHide() {
        this.setData({
            msgShow: false,
        });
    },
    onLoad: function () {
        const that = this;
        const eventChannel = this.getOpenerEventChannel();
        eventChannel.on('acceptDataFromOpenerPage', function (data) {
            const { rowData, oper } = data;
            that.setData({
                rowData,
                oper,
            });
        });
    },
    onReady: function () {
    },
    onShow: function () {
    },
    onHide: function () {
    },
    onUnload: function () {
    },
    onPullDownRefresh: function () {
    },
    onReachBottom: function () {
    }
});
//# sourceMappingURL=data:application/json;base64,