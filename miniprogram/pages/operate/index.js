import { approve, stop } from '../../services/assapi';
Page({
    app: getApp(),
    data: {
        comment: '',
        oper: '',
        rowData: {
            id: '',
            categoryid: '',
        },
    },
    onAppenfComment(e) {
        const { dataset: { text } } = e.target;
        const { comment } = this.data;
        const newComment = comment.concat(text);
        this.setData({
            comment: newComment,
        });
    },
    onApproveClick() {
        const that = this;
        const { rowData, comment, } = that.data;
        if (rowData) {
            approve({
                approvalId: rowData.id,
                categoryid: rowData.categoryid,
                comment: `${comment} (来自:微信小程序)`,
            }).then((res) => {
                const data = res.data;
                if (res.statusCode === 200) {
                    if (data.status == 200) {
                        wx.navigateBack({
                            delta: 2,
                        });
                    }
                    else {
                        wx.showToast({
                            title: data.errorMessage
                        });
                    }
                }
                else {
                    wx.showToast({
                        title: data.message
                    });
                }
            }).catch((res) => {
                wx.showToast({
                    title: res.message
                });
            });
        }
    },
    onStopClick() {
        const that = this;
        const { rowData, comment, oper } = that.data;
        if (rowData) {
            wx.navigateBack({
                success: () => {
                    const eventChannel = that.getOpenerEventChannel();
                    const promise = stop({
                        approvalId: rowData.id,
                        categoryid: rowData.categoryid,
                        comment: `${comment} (来自:微信小程序)`,
                    });
                    eventChannel.emit('operateBack', {
                        comment,
                        oper,
                        promise,
                    });
                }
            });
        }
    },
    onLoad: function () {
        const that = this;
        const eventChannel = this.getOpenerEventChannel();
        eventChannel.on('acceptDataFromOpenerPage', function (data) {
            const { rowData, oper } = data;
            that.setData({
                rowData,
                oper,
            });
        });
    },
    onReady: function () {
    },
    onShow: function () {
    },
    onHide: function () {
    },
    onUnload: function () {
    },
    onPullDownRefresh: function () {
    },
    onReachBottom: function () {
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRXRELElBQUksQ0FBQztJQUNILEdBQUcsRUFBRSxNQUFNLEVBQWE7SUFJeEIsSUFBSSxFQUFFO1FBQ0osT0FBTyxFQUFFLEVBQUU7UUFDWCxJQUFJLEVBQUUsRUFBRTtRQUNSLE9BQU8sRUFBRTtZQUNQLEVBQUUsRUFBRSxFQUFFO1lBQ04sVUFBVSxFQUFFLEVBQUU7U0FDZjtLQUNGO0lBRUQsZUFBZSxDQUFDLENBQU07UUFDcEIsTUFBTSxFQUFFLE9BQU8sRUFBRSxFQUFFLElBQUksRUFBRSxFQUFFLEdBSXZCLENBQUMsQ0FBQyxNQUFNLENBQUM7UUFFYixNQUFNLEVBQUUsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztRQUM5QixNQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3hDLElBQUksQ0FBQyxPQUFPLENBQUM7WUFDWCxPQUFPLEVBQUUsVUFBVTtTQUNwQixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsY0FBYztRQUNaLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQztRQUVsQixNQUFNLEVBQUUsT0FBTyxFQUFFLE9BQU8sR0FBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUE7UUFFeEMsSUFBSSxPQUFPLEVBQUU7WUFlWCxPQUFPLENBQUM7Z0JBQ04sVUFBVSxFQUFFLE9BQU8sQ0FBQyxFQUFFO2dCQUN0QixVQUFVLEVBQUUsT0FBTyxDQUFDLFVBQVU7Z0JBQzlCLE9BQU8sRUFBRSxHQUFHLE9BQU8sYUFBYTthQUNqQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUU7Z0JBQ2QsTUFBTSxJQUFJLEdBQVEsR0FBRyxDQUFDLElBQUksQ0FBQztnQkFDM0IsSUFBRyxHQUFHLENBQUMsVUFBVSxLQUFLLEdBQUcsRUFBRTtvQkFDekIsSUFBRyxJQUFJLENBQUMsTUFBTSxJQUFJLEdBQUcsRUFBRTt3QkFDckIsRUFBRSxDQUFDLFlBQVksQ0FBQzs0QkFDZCxLQUFLLEVBQUUsQ0FBQzt5QkFDVCxDQUFDLENBQUM7cUJBQ0o7eUJBQ0k7d0JBQ0gsRUFBRSxDQUFDLFNBQVMsQ0FBQzs0QkFDWCxLQUFLLEVBQUUsSUFBSSxDQUFDLFlBQVk7eUJBQ3pCLENBQUMsQ0FBQztxQkFDSjtpQkFDRjtxQkFDSTtvQkFDSCxFQUFFLENBQUMsU0FBUyxDQUFDO3dCQUNYLEtBQUssRUFBRSxJQUFJLENBQUMsT0FBTztxQkFDcEIsQ0FBQyxDQUFDO2lCQUNKO1lBQ0gsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUU7Z0JBQ2YsRUFBRSxDQUFDLFNBQVMsQ0FBQztvQkFDWCxLQUFLLEVBQUUsR0FBRyxDQUFDLE9BQU87aUJBQ25CLENBQUMsQ0FBQztZQUNMLENBQUMsQ0FBQyxDQUFDO1NBS0o7SUFDSCxDQUFDO0lBRUQsV0FBVztRQUNULE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQztRQUNsQixNQUFNLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBRTdDLElBQUksT0FBTyxFQUFFO1lBQ1gsRUFBRSxDQUFDLFlBQVksQ0FBQztnQkFDZCxPQUFPLEVBQUUsR0FBRyxFQUFFO29CQUNaLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO29CQUVsRCxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUM7d0JBQ25CLFVBQVUsRUFBRSxPQUFPLENBQUMsRUFBRTt3QkFDdEIsVUFBVSxFQUFFLE9BQU8sQ0FBQyxVQUFVO3dCQUM5QixPQUFPLEVBQUUsR0FBRyxPQUFPLGFBQWE7cUJBQ2pDLENBQUMsQ0FBQztvQkFFSCxZQUFZLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRTt3QkFDL0IsT0FBTzt3QkFDUCxJQUFJO3dCQUNKLE9BQU87cUJBQ1IsQ0FBQyxDQUFDO2dCQUNMLENBQUM7YUFDRixDQUFDLENBQUM7U0FFSjtJQUNILENBQUM7SUFLRCxNQUFNLEVBQUU7UUFDTixNQUFNLElBQUksR0FBRyxJQUFJLENBQUM7UUFDbEIsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLHFCQUFxQixFQUFFLENBQUM7UUFFbEQsWUFBWSxDQUFDLEVBQUUsQ0FBQywwQkFBMEIsRUFBRSxVQUFVLElBQUk7WUFDeEQsTUFBTSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsR0FBb0MsSUFBSSxDQUFDO1lBQ2hFLElBQUksQ0FBQyxPQUFPLENBQUM7Z0JBQ1gsT0FBTztnQkFDUCxJQUFJO2FBQ0wsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUE7SUFDSixDQUFDO0lBS0QsT0FBTyxFQUFFO0lBRVQsQ0FBQztJQUtELE1BQU0sRUFBRTtJQUVSLENBQUM7SUFLRCxNQUFNLEVBQUU7SUFFUixDQUFDO0lBS0QsUUFBUSxFQUFFO0lBRVYsQ0FBQztJQUtELGlCQUFpQixFQUFFO0lBRW5CLENBQUM7SUFLRCxhQUFhLEVBQUU7SUFFZixDQUFDO0NBQ0YsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiXG4vLyBpbXBvcnQgeyB3eFJlcXVlc3QgfSBmcm9tICcuLi8uLi8uLi91dGlscy9yZXF1ZXN0JztcbmltcG9ydCB7IGFwcHJvdmUsIHN0b3AgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9hc3NhcGknO1xuXG5QYWdlKHtcbiAgYXBwOiBnZXRBcHA8QnBtT3B0aW9uPigpLFxuICAvKipcbiAgICog6aG16Z2i55qE5Yid5aeL5pWw5o2uXG4gICAqL1xuICBkYXRhOiB7XG4gICAgY29tbWVudDogJycsXG4gICAgb3BlcjogJycsXG4gICAgcm93RGF0YToge1xuICAgICAgaWQ6ICcnLFxuICAgICAgY2F0ZWdvcnlpZDogJycsXG4gICAgfSxcbiAgfSxcblxuICBvbkFwcGVuZkNvbW1lbnQoZTogYW55KSB7XG4gICAgY29uc3QgeyBkYXRhc2V0OiB7IHRleHQgfSB9OiB7XG4gICAgICBkYXRhc2V0OiB7XG4gICAgICAgIHRleHQ6IHN0cmluZztcbiAgICAgIH1cbiAgICB9ID0gZS50YXJnZXQ7XG5cbiAgICBjb25zdCB7IGNvbW1lbnQgfSA9IHRoaXMuZGF0YTtcbiAgICBjb25zdCBuZXdDb21tZW50ID0gY29tbWVudC5jb25jYXQodGV4dCk7XG4gICAgdGhpcy5zZXREYXRhKHtcbiAgICAgIGNvbW1lbnQ6IG5ld0NvbW1lbnQsXG4gICAgfSk7XG4gIH0sXG5cbiAgb25BcHByb3ZlQ2xpY2soKSB7XG4gICAgY29uc3QgdGhhdCA9IHRoaXM7XG4gICAgLy8gY29uc3QgeyByb3dEYXRhLCBjb21tZW50LCBvcGVyIH0gPSB0aGF0LmRhdGE7XG4gICAgY29uc3QgeyByb3dEYXRhLCBjb21tZW50LCAgfSA9IHRoYXQuZGF0YVxuXG4gICAgaWYgKHJvd0RhdGEpIHtcbiAgICAgIC8vIGNvbnN0IGV2ZW50Q2hhbm5lbCA9IHRoYXQuZ2V0T3BlbmVyRXZlbnRDaGFubmVsKCk7XG5cbiAgICAgIC8vIGNvbnN0IHByb21pc2UgPSBhcHByb3ZlKHtcbiAgICAgIC8vICAgYXBwcm92YWxJZDogcm93RGF0YS5pZCxcbiAgICAgIC8vICAgY2F0ZWdvcnlpZDogcm93RGF0YS5jYXRlZ29yeWlkLFxuICAgICAgLy8gICBjb21tZW50OiBgJHtjb21tZW50fSAo5p2l6IeqOuW+ruS/oeWwj+eoi+W6jylgLFxuICAgICAgLy8gfSk7XG5cbiAgICAgIC8vIGV2ZW50Q2hhbm5lbC5lbWl0KCdvcGVyYXRlQmFjaycsIHtcbiAgICAgIC8vICAgY29tbWVudCxcbiAgICAgIC8vICAgb3BlcixcbiAgICAgIC8vICAgcHJvbWlzZSxcbiAgICAgIC8vIH0pO1xuXG4gICAgICBhcHByb3ZlKHtcbiAgICAgICAgYXBwcm92YWxJZDogcm93RGF0YS5pZCxcbiAgICAgICAgY2F0ZWdvcnlpZDogcm93RGF0YS5jYXRlZ29yeWlkLFxuICAgICAgICBjb21tZW50OiBgJHtjb21tZW50fSAo5p2l6IeqOuW+ruS/oeWwj+eoi+W6jylgLFxuICAgICAgfSkudGhlbigocmVzKSA9PiB7XG4gICAgICAgIGNvbnN0IGRhdGE6IGFueSA9IHJlcy5kYXRhO1xuICAgICAgICBpZihyZXMuc3RhdHVzQ29kZSA9PT0gMjAwKSB7XG4gICAgICAgICAgaWYoZGF0YS5zdGF0dXMgPT0gMjAwKSB7XG4gICAgICAgICAgICB3eC5uYXZpZ2F0ZUJhY2soe1xuICAgICAgICAgICAgICBkZWx0YTogMixcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHd4LnNob3dUb2FzdCh7XG4gICAgICAgICAgICAgIHRpdGxlOiBkYXRhLmVycm9yTWVzc2FnZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHd4LnNob3dUb2FzdCh7XG4gICAgICAgICAgICB0aXRsZTogZGF0YS5tZXNzYWdlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pLmNhdGNoKChyZXMpID0+IHtcbiAgICAgICAgd3guc2hvd1RvYXN0KHtcbiAgICAgICAgICB0aXRsZTogcmVzLm1lc3NhZ2VcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgLy8gd3gubmF2aWdhdGVCYWNrKHtcbiAgICAgICAgXG4gICAgICAvLyB9KTtcbiAgICB9XG4gIH0sXG5cbiAgb25TdG9wQ2xpY2soKSB7XG4gICAgY29uc3QgdGhhdCA9IHRoaXM7XG4gICAgY29uc3QgeyByb3dEYXRhLCBjb21tZW50LCBvcGVyIH0gPSB0aGF0LmRhdGE7XG5cbiAgICBpZiAocm93RGF0YSkge1xuICAgICAgd3gubmF2aWdhdGVCYWNrKHtcbiAgICAgICAgc3VjY2VzczogKCkgPT4ge1xuICAgICAgICAgIGNvbnN0IGV2ZW50Q2hhbm5lbCA9IHRoYXQuZ2V0T3BlbmVyRXZlbnRDaGFubmVsKCk7XG5cbiAgICAgICAgICBjb25zdCBwcm9taXNlID0gc3RvcCh7XG4gICAgICAgICAgICBhcHByb3ZhbElkOiByb3dEYXRhLmlkLFxuICAgICAgICAgICAgY2F0ZWdvcnlpZDogcm93RGF0YS5jYXRlZ29yeWlkLFxuICAgICAgICAgICAgY29tbWVudDogYCR7Y29tbWVudH0gKOadpeiHqjrlvq7kv6HlsI/nqIvluo8pYCxcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGV2ZW50Q2hhbm5lbC5lbWl0KCdvcGVyYXRlQmFjaycsIHtcbiAgICAgICAgICAgIGNvbW1lbnQsXG4gICAgICAgICAgICBvcGVyLFxuICAgICAgICAgICAgcHJvbWlzZSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIOeUn+WRveWRqOacn+WHveaVsC0t55uR5ZCs6aG16Z2i5Yqg6L29XG4gICAqL1xuICBvbkxvYWQ6IGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCB0aGF0ID0gdGhpcztcbiAgICBjb25zdCBldmVudENoYW5uZWwgPSB0aGlzLmdldE9wZW5lckV2ZW50Q2hhbm5lbCgpO1xuICAgIC8vIOebkeWQrGFjY2VwdERhdGFGcm9tT3BlbmVyUGFnZeS6i+S7tu+8jOiOt+WPluS4iuS4gOmhtemdoumAmui/h2V2ZW50Q2hhbm5lbOS8oOmAgeWIsOW9k+WJjemhtemdoueahOaVsOaNrlxuICAgIGV2ZW50Q2hhbm5lbC5vbignYWNjZXB0RGF0YUZyb21PcGVuZXJQYWdlJywgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgIGNvbnN0IHsgcm93RGF0YSwgb3BlciB9OiB7IHJvd0RhdGE6IGFueTsgb3Blcjogc3RyaW5nOyB9ID0gZGF0YTtcbiAgICAgIHRoYXQuc2V0RGF0YSh7XG4gICAgICAgIHJvd0RhdGEsXG4gICAgICAgIG9wZXIsXG4gICAgICB9KTtcbiAgICB9KVxuICB9LFxuXG4gIC8qKlxuICAgKiDnlJ/lkb3lkajmnJ/lh73mlbAtLeebkeWQrOmhtemdouWIneasoea4suafk+WujOaIkFxuICAgKi9cbiAgb25SZWFkeTogZnVuY3Rpb24gKCkge1xuXG4gIH0sXG5cbiAgLyoqXG4gICAqIOeUn+WRveWRqOacn+WHveaVsC0t55uR5ZCs6aG16Z2i5pi+56S6XG4gICAqL1xuICBvblNob3c6IGZ1bmN0aW9uICgpIHtcblxuICB9LFxuXG4gIC8qKlxuICAgKiDnlJ/lkb3lkajmnJ/lh73mlbAtLeebkeWQrOmhtemdoumakOiXj1xuICAgKi9cbiAgb25IaWRlOiBmdW5jdGlvbiAoKSB7XG5cbiAgfSxcblxuICAvKipcbiAgICog55Sf5ZG95ZGo5pyf5Ye95pWwLS3nm5HlkKzpobXpnaLljbjovb1cbiAgICovXG4gIG9uVW5sb2FkOiBmdW5jdGlvbiAoKSB7XG5cbiAgfSxcblxuICAvKipcbiAgICog6aG16Z2i55u45YWz5LqL5Lu25aSE55CG5Ye95pWwLS3nm5HlkKznlKjmiLfkuIvmi4nliqjkvZxcbiAgICovXG4gIG9uUHVsbERvd25SZWZyZXNoOiBmdW5jdGlvbiAoKSB7XG5cbiAgfSxcblxuICAvKipcbiAgICog6aG16Z2i5LiK5ouJ6Kem5bqV5LqL5Lu255qE5aSE55CG5Ye95pWwXG4gICAqL1xuICBvblJlYWNoQm90dG9tOiBmdW5jdGlvbiAoKSB7XG5cbiAgfVxufSk7Il19