import { wxRequest } from '../../utils/request';
import { approve, stop } from '../../services/assapi';
Page({
    app: getApp(),
    data: {
        error: '',
        assList: [],
        statusBarHeight: getApp().globalData.statusBarHeight,
    },
    setError(errMsg) {
        this.setData({
            error: errMsg
        });
    },
    onRefreshData() {
        const { app } = this;
        const { token } = app.globalData.accountInfo;
        const that = this;
        wxRequest({
            url: "/ass/asslist/" + token,
        }).then((res) => {
            wx.hideLoading();
            if (res.statusCode == 200) {
                const data = res.data;
                that.setData({
                    assList: data.data
                });
            }
            else {
                that.setError(res.errMsg);
            }
        })
            .catch((res) => {
            that.setError(res.errMsg);
        });
    },
    onCellClick(e) {
        const that = this;
        const { dataset: { id } } = e.target;
        const row = this.searchRow(id);
        if (row) {
            wx.navigateTo({
                url: '/pages/detail/index',
                events: {
                    detailBack: function (data) {
                        const { id, promise } = data;
                        that.updateRow(data.id, {
                            loading: true,
                        });
                        promise.then((res) => {
                            that.onOperateSuccess(id, res);
                        }).catch((res) => {
                            that.onOperateFail(id, res);
                        });
                    }
                },
                success: function (res) {
                    res.eventChannel.emit('acceptDataFromOpenerPage', {
                        approvalid: id,
                        rowData: row,
                    });
                }
            });
        }
    },
    onOperateSuccess(id, res) {
        const data = res.data;
        if (res.statusCode === 200) {
            if (data.status == 200) {
                this.removeRow(id);
            }
            else {
                this.updateRow(id, {
                    error: String(data.errorMessage),
                    loading: false,
                });
            }
        }
        else {
            this.updateRow(id, {
                error: String(data.message),
                loading: false,
            });
        }
    },
    onOperateFail(id, res) {
        this.updateRow(id, {
            error: String(res.message),
            loading: false,
        });
    },
    onStopClick(e) {
        const { dataset: { id } } = e.target;
        const that = this;
        const row = that.searchRow(id);
        if (row) {
            that.updateRow(id, {
                loading: true,
            });
            stop({
                approvalId: row.id,
                categoryid: row.categoryid,
                comment: '快速中止 (来自:微信小程序)',
            }).then((res) => {
                that.onOperateSuccess(id, res);
            }).catch((res) => {
                that.onOperateFail(id, res);
            });
        }
    },
    onApproveClick(e) {
        const { dataset: { id } } = e.target;
        const that = this;
        const row = that.searchRow(id);
        if (row) {
            that.updateRow(id, {
                loading: true,
            });
            approve({
                approvalId: row.id,
                categoryid: row.categoryid,
                comment: '快速同意 (来自:微信小程序)',
            }).then((res) => {
                that.onOperateSuccess(id, res);
            }).catch((res) => {
                that.onOperateFail(id, res);
            });
        }
    },
    searchRow(id) {
        const { assList } = this.data;
        if (assList) {
            return assList.find((item) => item.id === id);
        }
        else {
            return undefined;
        }
    },
    updateRow(id, fields) {
        const { assList } = this.data;
        assList.map((item) => {
            if (item.id == id) {
                Object.assign(item, {
                    ...fields,
                });
            }
        });
        this.setData({
            assList,
        });
    },
    removeRow(id) {
        const { assList } = this.data;
        const newList = assList.filter((item) => item.id !== id);
        this.setData({
            assList: newList,
        });
    },
    onLoad() {
    },
    onShow() {
        this.onRefreshData();
    },
    onPullDownRefresh() {
        this.onRefreshData();
    }
});
//# sourceMappingURL=data:application/json;base64,