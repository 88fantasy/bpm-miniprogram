import { wxRequest } from '../../utils/request';
import { approve, stop } from '../../services/assapi';
Page({
    app: getApp(),
    data: {
        error: '',
        assList: []
    },
    onSlideButtonTap(e) {
        console.log('slide button tap', e.detail);
    },
    setError(errMsg) {
        this.setData({
            error: errMsg
        });
    },
    onRefreshData() {
        const { app } = this;
        const { token } = app.globalData.accountInfo;
        const that = this;
        wxRequest({
            url: "/ass/asslist/" + token,
        }).then((res) => {
            wx.hideLoading();
            if (res.statusCode == 200) {
                const data = res.data;
                that.setData({
                    assList: data.data
                });
            }
            else {
                that.setError(res.errMsg);
            }
        })
            .catch((res) => {
            that.setError(res.errMsg);
        });
    },
    onCellClick(e) {
        const { dataset: { id, categoryid, operation } } = e.target;
        wx.navigateTo({
            url: '/pages/detail/index',
            success: function (res) {
                res.eventChannel.emit('acceptDataFromOpenerPage', {
                    approvalid: id,
                    categoryid,
                    operation,
                });
            }
        });
    },
    onStopClick(e) {
        const { dataset: { id } } = e.target;
        const that = this;
        const row = that.searchRow(id);
        if (row) {
            that.updateRow(id, {
                loading: true,
            });
            stop({
                approvalId: row.id,
                categoryid: row.categoryid,
                comment: '快速中止 (来自:微信小程序)',
            }).then((res) => {
                const data = res.data;
                if (res.statusCode === 200) {
                    if (data.status == 200) {
                        that.removeRow(id);
                    }
                    else {
                        that.updateRow(id, {
                            error: String(data.errorMessage),
                            loading: false,
                        });
                    }
                }
                else {
                    that.updateRow(id, {
                        error: String(data.message),
                        loading: false,
                    });
                }
            }).catch((res) => {
                console.log(res);
                that.updateRow(id, {
                    error: String(res.message),
                    loading: false,
                });
            });
        }
    },
    onApproveClick(e) {
        const { dataset: { id } } = e.target;
        const that = this;
        const row = that.searchRow(id);
        if (row) {
            that.updateRow(id, {
                loading: true,
            });
            approve({
                approvalId: row.id,
                categoryid: row.categoryid,
                comment: '快速同意 (来自:微信小程序)',
            }).then((res) => {
                const data = res.data;
                if (res.statusCode === 200) {
                    if (data.status == 200) {
                        that.removeRow(id);
                    }
                    else {
                        that.updateRow(id, {
                            error: String(data.errorMessage),
                            loading: false,
                        });
                    }
                }
                else {
                    that.updateRow(id, {
                        error: String(data.message),
                        loading: false,
                    });
                }
            }).catch((res) => {
                console.log(res);
                that.updateRow(id, {
                    error: String(res.message),
                    loading: false,
                });
            });
        }
    },
    searchRow(id) {
        const { assList } = this.data;
        if (assList) {
            return assList.find((item) => item.id === id);
        }
        else {
            return undefined;
        }
    },
    updateRow(id, fields) {
        const { assList } = this.data;
        assList.map((item) => {
            if (item.id == id) {
                Object.assign(item, {
                    ...fields,
                });
            }
        });
        this.setData({
            assList,
        });
    },
    removeRow(id) {
        const { assList } = this.data;
        const newList = assList.filter((item) => item.id !== id);
        this.setData({
            assList: newList,
        });
    },
    onLoad() {
        this.onRefreshData();
    },
    onPullDownRefresh() {
        this.onRefreshData();
    }
});
//# sourceMappingURL=data:application/json;base64,