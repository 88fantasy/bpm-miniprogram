import { wxRequest } from '../../utils/request';
Page({
    app: getApp(),
    data: {
        error: '',
        assList: []
    },
    onSlideButtonTap(e) {
        console.log('slide button tap', e.detail);
    },
    setError(errMsg) {
        this.setData({
            error: errMsg
        });
    },
    onRefreshData() {
        const { app } = this;
        const { token } = app.globalData;
        const that = this;
        wxRequest({
            url: "/ass/asslist/" + token,
        }).then((res) => {
            wx.hideLoading();
            if (res.statusCode == 200) {
                const data = res.data;
                that.setData({
                    assList: data.data
                });
            }
            else {
                that.setError(res.errMsg);
            }
        })
            .catch((res) => {
            that.setError(res.errMsg);
        });
    },
    onCellClick(e) {
        const { dataset: { id, categoryid, operation } } = e.target;
        wx.navigateTo({
            url: '/pages/detail/index',
            success: function (res) {
                res.eventChannel.emit('acceptDataFromOpenerPage', {
                    approvalid: id,
                    categoryid,
                    operation,
                });
            }
        });
    },
    onLoad() {
        this.onRefreshData();
    },
    onPullDownRefresh() {
        this.onRefreshData();
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImxpc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRWhELElBQUksQ0FBQztJQUNILEdBQUcsRUFBRSxNQUFNLEVBQWE7SUFDeEIsSUFBSSxFQUFFO1FBQ0osS0FBSyxFQUFFLEVBQUU7UUFDVCxPQUFPLEVBQUUsRUFBRTtLQUNaO0lBRUQsZ0JBQWdCLENBQUMsQ0FBTTtRQUNyQixPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1QyxDQUFDO0lBRUQsUUFBUSxDQUFDLE1BQWM7UUFDckIsSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUNYLEtBQUssRUFBRSxNQUFNO1NBQ2QsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELGFBQWE7UUFDWCxNQUFNLEVBQUUsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDO1FBQ3JCLE1BQU0sRUFBRSxLQUFLLEVBQUUsR0FBRyxHQUFHLENBQUMsVUFBVSxDQUFDO1FBQ2pDLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQztRQUNsQixTQUFTLENBQUM7WUFDUixHQUFHLEVBQUUsZUFBZSxHQUFHLEtBQUs7U0FDN0IsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO1lBQ2QsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ2pCLElBQUksR0FBRyxDQUFDLFVBQVUsSUFBSSxHQUFHLEVBQUU7Z0JBQ3pCLE1BQU0sSUFBSSxHQUFRLEdBQUcsQ0FBQyxJQUFJLENBQUM7Z0JBQzNCLElBQUksQ0FBQyxPQUFPLENBQUM7b0JBQ1gsT0FBTyxFQUFFLElBQUksQ0FBQyxJQUFJO2lCQUNuQixDQUFDLENBQUE7YUFDSDtpQkFDSTtnQkFDSCxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUMzQjtRQUNILENBQUMsQ0FBQzthQUNDLEtBQUssQ0FBQyxDQUFDLEdBQTRDLEVBQUUsRUFBRTtZQUN0RCxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM1QixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCxXQUFXLENBQUMsQ0FBTTtRQUNoQixNQUFNLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRSxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUM7UUFDNUQsRUFBRSxDQUFDLFVBQVUsQ0FBQztZQUNaLEdBQUcsRUFBRSxxQkFBcUI7WUFDMUIsT0FBTyxFQUFFLFVBQVUsR0FBRztnQkFFcEIsR0FBRyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsMEJBQTBCLEVBQUU7b0JBQ2hELFVBQVUsRUFBRSxFQUFFO29CQUNkLFVBQVU7b0JBQ1YsU0FBUztpQkFDVixDQUFDLENBQUE7WUFDSixDQUFDO1NBQ0YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELE1BQU07UUFFSixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7SUFFdkIsQ0FBQztJQUVELGlCQUFpQjtRQUNmLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUN2QixDQUFDO0NBRUYsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLy8gbGlzdC50c1xuaW1wb3J0IHsgd3hSZXF1ZXN0IH0gZnJvbSAnLi4vLi4vdXRpbHMvcmVxdWVzdCc7XG5cblBhZ2Uoe1xuICBhcHA6IGdldEFwcDxCcG1PcHRpb24+KCksXG4gIGRhdGE6IHtcbiAgICBlcnJvcjogJycsXG4gICAgYXNzTGlzdDogW11cbiAgfSxcblxuICBvblNsaWRlQnV0dG9uVGFwKGU6IGFueSkge1xuICAgIGNvbnNvbGUubG9nKCdzbGlkZSBidXR0b24gdGFwJywgZS5kZXRhaWwpO1xuICB9LFxuXG4gIHNldEVycm9yKGVyck1zZzogc3RyaW5nKSB7XG4gICAgdGhpcy5zZXREYXRhKHtcbiAgICAgIGVycm9yOiBlcnJNc2dcbiAgICB9KTtcbiAgfSxcblxuICBvblJlZnJlc2hEYXRhKCkge1xuICAgIGNvbnN0IHsgYXBwIH0gPSB0aGlzO1xuICAgIGNvbnN0IHsgdG9rZW4gfSA9IGFwcC5nbG9iYWxEYXRhO1xuICAgIGNvbnN0IHRoYXQgPSB0aGlzO1xuICAgIHd4UmVxdWVzdCh7XG4gICAgICB1cmw6IFwiL2Fzcy9hc3NsaXN0L1wiICsgdG9rZW4sXG4gICAgfSkudGhlbigocmVzKSA9PiB7XG4gICAgICB3eC5oaWRlTG9hZGluZygpO1xuICAgICAgaWYgKHJlcy5zdGF0dXNDb2RlID09IDIwMCkge1xuICAgICAgICBjb25zdCBkYXRhOiBhbnkgPSByZXMuZGF0YTtcbiAgICAgICAgdGhhdC5zZXREYXRhKHtcbiAgICAgICAgICBhc3NMaXN0OiBkYXRhLmRhdGFcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICB0aGF0LnNldEVycm9yKHJlcy5lcnJNc2cpO1xuICAgICAgfVxuICAgIH0pXG4gICAgICAuY2F0Y2goKHJlczogV2VjaGF0TWluaXByb2dyYW0uR2VuZXJhbENhbGxiYWNrUmVzdWx0KSA9PiB7XG4gICAgICAgIHRoYXQuc2V0RXJyb3IocmVzLmVyck1zZyk7XG4gICAgICB9KTtcbiAgfSxcblxuICBvbkNlbGxDbGljayhlOiBhbnkpIHtcbiAgICBjb25zdCB7IGRhdGFzZXQ6IHsgaWQsIGNhdGVnb3J5aWQsIG9wZXJhdGlvbiB9IH0gPSBlLnRhcmdldDtcbiAgICB3eC5uYXZpZ2F0ZVRvKHtcbiAgICAgIHVybDogJy9wYWdlcy9kZXRhaWwvaW5kZXgnLFxuICAgICAgc3VjY2VzczogZnVuY3Rpb24gKHJlcykge1xuICAgICAgICAvLyDpgJrov4dldmVudENoYW5uZWzlkJHooqvmiZPlvIDpobXpnaLkvKDpgIHmlbDmja5cbiAgICAgICAgcmVzLmV2ZW50Q2hhbm5lbC5lbWl0KCdhY2NlcHREYXRhRnJvbU9wZW5lclBhZ2UnLCB7XG4gICAgICAgICAgYXBwcm92YWxpZDogaWQsXG4gICAgICAgICAgY2F0ZWdvcnlpZCxcbiAgICAgICAgICBvcGVyYXRpb24sXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG5cbiAgb25Mb2FkKCkge1xuICAgIC8vIGNvbnN0IHsgYXBwIH0gPSB0aGlzO1xuICAgIHRoaXMub25SZWZyZXNoRGF0YSgpO1xuXG4gIH0sXG5cbiAgb25QdWxsRG93blJlZnJlc2goKSB7XG4gICAgdGhpcy5vblJlZnJlc2hEYXRhKCk7XG4gIH1cblxufSkiXX0=