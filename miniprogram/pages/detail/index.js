import { wxRequest } from '../../utils/request';
import { formatTime } from '../../utils/util';
Page({
    app: getApp(),
    data: {
        approvalid: '',
        rowData: {
            categoryid: [],
        },
        operation: [],
        detail: {
            content: [],
            record: [],
            attachment: [],
            steps: [],
            active: 0,
        },
    },
    onReturn() {
        wx.navigateBack({});
    },
    onAttachmentClick(e) {
        const { dataset: { url } } = e.target;
        if (url) {
            wx.downloadFile({
                url,
                success: function (res) {
                    const filePath = res.tempFilePath;
                    wx.openDocument({
                        filePath,
                        success: function (res) {
                            console.log('打开文档成功', res);
                        }
                    });
                },
                fail: function (res) {
                    console.log("download fail: ", res);
                }
            });
        }
    },
    onOperateClick(e) {
        const that = this;
        const { dataset: { operate } } = e.target;
        const { rowData } = this.data;
        if (rowData) {
            wx.navigateTo({
                url: `/pages/operate/index`,
                events: {
                    operateBack: function (data) {
                        wx.navigateBack({
                            success: () => {
                                const eventChannel = that.getOpenerEventChannel();
                                eventChannel.emit('detailBack', {
                                    promise: data.promise,
                                });
                            }
                        });
                    }
                },
                success: function (res) {
                    res.eventChannel.emit('acceptDataFromOpenerPage', {
                        rowData: rowData,
                        oper: operate,
                    });
                }
            });
        }
    },
    refreshDetail: function () {
        const { data: { approvalid, rowData }, app: { globalData: { accountInfo: { token } } } } = this;
        const that = this;
        wxRequest({
            header: {
                'content-type': 'application/x-www-form-urlencoded',
            },
            url: "/ass/assdetail",
            method: 'POST',
            data: {
                token,
                approvalid,
                categoryid: rowData.categoryid,
            }
        }).then((res) => {
            wx.hideLoading();
            if (res.statusCode == 200) {
                const data = res.data;
                const { record = [] } = data.data;
                let steps = [];
                let active = 0;
                record.map((item, index) => {
                    steps.push({
                        text: `${item.operator}(${item.checkmans}): ${item.comment}`,
                        desc: `${item.operatorNode}  ${item.time ? formatTime(new Date(item.time)) : "未审"}`
                    });
                    if (item.time) {
                        active = index;
                    }
                });
                that.setData({
                    detail: {
                        ...data.data,
                        steps,
                        active,
                    }
                });
            }
            else {
            }
        })
            .catch(() => {
            wx.hideLoading();
        });
    },
    onLoad: function () {
        const that = this;
        const eventChannel = this.getOpenerEventChannel();
        eventChannel.on('acceptDataFromOpenerPage', function (data) {
            const operation = data.rowData.operation;
            if (operation) {
                operation.map((item) => {
                    if (item.oper === 'approve') {
                        item.type = 'primary';
                    }
                    else if (item.oper === 'stop') {
                        item.type = 'danger';
                    }
                    else {
                        item.type = 'default';
                    }
                });
            }
            that.setData({
                ...data,
                operation,
            });
            that.refreshDetail();
        });
    },
    onPullDownRefresh() {
        this.refreshDetail();
    }
});
//# sourceMappingURL=data:application/json;base64,