import { wxRequest } from '../../utils/request';
Page({
    app: getApp(),
    data: {
        approvalid: '',
        categoryid: '',
        operation: [],
        detail: {
            content: [],
            record: [],
            attachment: [],
            steps: [],
            active: 0,
        },
    },
    onReturn() {
        wx.navigateBack({});
    },
    onAttachmentClick(e) {
        const { dataset: { url } } = e.target;
        if (url) {
            wx.downloadFile({
                url,
                success: function (res) {
                    const filePath = res.tempFilePath;
                    wx.openDocument({
                        filePath,
                        success: function (res) {
                            console.log('打开文档成功', res);
                        }
                    });
                },
                fail: function (res) {
                    console.log("download fail: ", res);
                }
            });
        }
    },
    refreshDetail: function () {
        const { data: { approvalid, categoryid }, app: { globalData: { accountInfo: { token } } } } = this;
        const that = this;
        wxRequest({
            header: {
                'content-type': 'application/x-www-form-urlencoded',
            },
            url: "/ass/assdetail",
            method: 'POST',
            data: {
                token,
                approvalid,
                categoryid,
            }
        }).then((res) => {
            wx.hideLoading();
            if (res.statusCode == 200) {
                const data = res.data;
                const { record = [] } = data.data;
                let steps = [];
                let active = 0;
                record.map((item, index) => {
                    steps.push({
                        text: `${item.operator}(${item.checkmans}): ${item.comment}`,
                        desc: `${item.operatorNode}  ${item.time}`
                    });
                    if (item.time) {
                        active = index;
                    }
                });
                that.setData({
                    detail: {
                        ...data.data,
                        steps,
                        active,
                    }
                });
            }
            else {
            }
        })
            .catch(() => {
            wx.hideLoading();
        });
    },
    onLoad: function () {
        const that = this;
        const eventChannel = this.getOpenerEventChannel();
        eventChannel.on('acceptDataFromOpenerPage', function (data) {
            const operation = data.operation;
            if (operation) {
                operation.map((item) => {
                    if (item.oper === 'approve') {
                        item.type = 'primary';
                    }
                    else if (item.oper === 'stop') {
                        item.type = 'danger';
                    }
                    else {
                        item.type = 'default';
                    }
                });
            }
            that.setData({
                ...data,
                operation,
            });
            that.refreshDetail();
        });
    },
    onPullDownRefresh() {
        this.refreshDetail();
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFaEQsSUFBSSxDQUFDO0lBQ0gsR0FBRyxFQUFFLE1BQU0sRUFBYTtJQUN4QixJQUFJLEVBQUU7UUFDSixVQUFVLEVBQUUsRUFBRTtRQUNkLFVBQVUsRUFBRSxFQUFFO1FBQ2QsU0FBUyxFQUFFLEVBQUU7UUFDYixNQUFNLEVBQUU7WUFDTixPQUFPLEVBQUUsRUFBRTtZQUNYLE1BQU0sRUFBRSxFQUFFO1lBQ1YsVUFBVSxFQUFFLEVBQUU7WUFDZCxLQUFLLEVBQUUsRUFBRTtZQUNULE1BQU0sRUFBRyxDQUFDO1NBQ1g7S0FDRjtJQUVELFFBQVE7UUFDTixFQUFFLENBQUMsWUFBWSxDQUFDLEVBRWYsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELGlCQUFpQixDQUFDLENBQU07UUFDdEIsTUFBTSxFQUFFLE9BQU8sRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEdBS3RCLENBQUMsQ0FBQyxNQUFNLENBQUM7UUFDYixJQUFHLEdBQUcsRUFBRTtZQUNOLEVBQUUsQ0FBQyxZQUFZLENBQUM7Z0JBRWQsR0FBRztnQkFDSCxPQUFPLEVBQUUsVUFBVSxHQUFHO29CQUNwQixNQUFNLFFBQVEsR0FBRyxHQUFHLENBQUMsWUFBWSxDQUFDO29CQUNsQyxFQUFFLENBQUMsWUFBWSxDQUFDO3dCQUNkLFFBQVE7d0JBRVIsT0FBTyxFQUFFLFVBQVUsR0FBRzs0QkFDcEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUMsR0FBRyxDQUFDLENBQUM7d0JBQzVCLENBQUM7cUJBQ0YsQ0FBQyxDQUFBO2dCQUNKLENBQUM7Z0JBQ0QsSUFBSSxFQUFDLFVBQVMsR0FBRztvQkFDZixPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixFQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNyQyxDQUFD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QUUsQ0FBQztRQUN2QixDQUFDLENBQUMsQ0FBQTtJQUNKLENBQUM7SUFFRCxpQkFBaUI7UUFDZixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDdkIsQ0FBQztDQUVGLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8vIGluZGV4LnRzXG5pbXBvcnQgeyB3eFJlcXVlc3QgfSBmcm9tICcuLi8uLi91dGlscy9yZXF1ZXN0JztcblxuUGFnZSh7XG4gIGFwcDogZ2V0QXBwPEJwbU9wdGlvbj4oKSxcbiAgZGF0YToge1xuICAgIGFwcHJvdmFsaWQ6ICcnLFxuICAgIGNhdGVnb3J5aWQ6ICcnLFxuICAgIG9wZXJhdGlvbjogW10sXG4gICAgZGV0YWlsOiB7XG4gICAgICBjb250ZW50OiBbXSxcbiAgICAgIHJlY29yZDogW10sXG4gICAgICBhdHRhY2htZW50OiBbXSxcbiAgICAgIHN0ZXBzOiBbXSxcbiAgICAgIGFjdGl2ZSA6IDAsXG4gICAgfSxcbiAgfSxcblxuICBvblJldHVybigpIHtcbiAgICB3eC5uYXZpZ2F0ZUJhY2soe1xuXG4gICAgfSk7XG4gIH0sXG5cbiAgb25BdHRhY2htZW50Q2xpY2soZTogYW55KSB7XG4gICAgY29uc3QgeyBkYXRhc2V0OiB7IHVybCB9IH0gOiB7XG4gICAgICBkYXRhc2V0OiB7XG4gICAgICAgIHVybDogc3RyaW5nO1xuICAgICAgICB0eXBlOiBzdHJpbmc7XG4gICAgICB9XG4gICAgfSA9IGUudGFyZ2V0O1xuICAgIGlmKHVybCkge1xuICAgICAgd3guZG93bmxvYWRGaWxlKHtcbiAgICAgICAgLy8g56S65L6LIHVybO+8jOW5tumdnuecn+WunuWtmOWcqFxuICAgICAgICB1cmwsXG4gICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgICAgICBjb25zdCBmaWxlUGF0aCA9IHJlcy50ZW1wRmlsZVBhdGg7XG4gICAgICAgICAgd3gub3BlbkRvY3VtZW50KHtcbiAgICAgICAgICAgIGZpbGVQYXRoLFxuICAgICAgICAgICAgLy8gZmlsZVR5cGU6IHR5cGUsXG4gICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAocmVzKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKCfmiZPlvIDmlofmoaPmiJDlip8nLHJlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgfSxcbiAgICAgICAgZmFpbDpmdW5jdGlvbihyZXMpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcImRvd25sb2FkIGZhaWw6IFwiLHJlcyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfSxcblxuICByZWZyZXNoRGV0YWlsOiBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgeyBkYXRhOiB7IGFwcHJvdmFsaWQsIGNhdGVnb3J5aWQgfSwgYXBwOiB7IGdsb2JhbERhdGE6IHsgYWNjb3VudEluZm8gOiB7IHRva2VuIH0gfSB9IH0gPSB0aGlzO1xuICAgIGNvbnN0IHRoYXQgPSB0aGlzO1xuICAgIHd4UmVxdWVzdCh7XG4gICAgICBoZWFkZXI6IHtcbiAgICAgICAgJ2NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnLFxuICAgICAgfSxcbiAgICAgIHVybDogXCIvYXNzL2Fzc2RldGFpbFwiLFxuICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIHRva2VuLFxuICAgICAgICBhcHByb3ZhbGlkLFxuICAgICAgICBjYXRlZ29yeWlkLFxuICAgICAgfVxuICAgIH0pLnRoZW4oKHJlcykgPT4ge1xuICAgICAgd3guaGlkZUxvYWRpbmcoKTtcbiAgICAgIGlmIChyZXMuc3RhdHVzQ29kZSA9PSAyMDApIHtcbiAgICAgICAgY29uc3QgZGF0YTogYW55ID0gcmVzLmRhdGE7XG5cbiAgICAgICAgY29uc3QgeyByZWNvcmQgPSBbXSB9OiB7IHJlY29yZDogQXJyYXk8YW55PiB9ID0gZGF0YS5kYXRhO1xuICAgICAgICBsZXQgc3RlcHM6IHsgdGV4dDogc3RyaW5nOyBkZXNjOiBzdHJpbmc7IH1bXSA9IFtdO1xuICAgICAgICBsZXQgYWN0aXZlID0gMDtcbiAgICAgICAgcmVjb3JkLm1hcCgoaXRlbSxpbmRleCkgPT4ge1xuICAgICAgICAgIHN0ZXBzLnB1c2goe1xuICAgICAgICAgICAgdGV4dDogYCR7aXRlbS5vcGVyYXRvcn0oJHtpdGVtLmNoZWNrbWFuc30pOiAke2l0ZW0uY29tbWVudH1gLFxuICAgICAgICAgICAgZGVzYzogYCR7aXRlbS5vcGVyYXRvck5vZGV9ICAke2l0ZW0udGltZX1gXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaWYoaXRlbS50aW1lKSB7XG4gICAgICAgICAgICBhY3RpdmUgPSBpbmRleDtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG5cbiAgICAgICAgdGhhdC5zZXREYXRhKHtcbiAgICAgICAgICBkZXRhaWw6IHtcbiAgICAgICAgICAgIC4uLmRhdGEuZGF0YSxcbiAgICAgICAgICAgIHN0ZXBzLFxuICAgICAgICAgICAgYWN0aXZlLFxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcblxuICAgICAgfVxuICAgIH0pXG4gICAgICAuY2F0Y2goKCkgPT4ge1xuICAgICAgICB3eC5oaWRlTG9hZGluZygpO1xuICAgICAgfSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIOeUn+WRveWRqOacn+WHveaVsC0t55uR5ZCs6aG16Z2i5Yqg6L29XG4gICAqL1xuICBvbkxvYWQ6IGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCB0aGF0ID0gdGhpcztcbiAgICBjb25zdCBldmVudENoYW5uZWwgPSB0aGlzLmdldE9wZW5lckV2ZW50Q2hhbm5lbCgpO1xuICAgIC8vIOebkeWQrGFjY2VwdERhdGFGcm9tT3BlbmVyUGFnZeS6i+S7tu+8jOiOt+WPluS4iuS4gOmhtemdoumAmui/h2V2ZW50Q2hhbm5lbOS8oOmAgeWIsOW9k+WJjemhtemdoueahOaVsOaNrlxuICAgIGV2ZW50Q2hhbm5lbC5vbignYWNjZXB0RGF0YUZyb21PcGVuZXJQYWdlJywgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgIGNvbnN0IG9wZXJhdGlvbjogW10gPSBkYXRhLm9wZXJhdGlvbjtcbiAgICAgIGlmIChvcGVyYXRpb24pIHtcbiAgICAgICAgb3BlcmF0aW9uLm1hcCgoaXRlbTogYW55KSA9PiB7XG4gICAgICAgICAgaWYgKGl0ZW0ub3BlciA9PT0gJ2FwcHJvdmUnKSB7XG4gICAgICAgICAgICBpdGVtLnR5cGUgPSAncHJpbWFyeSc7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKGl0ZW0ub3BlciA9PT0gJ3N0b3AnKSB7XG4gICAgICAgICAgICBpdGVtLnR5cGUgPSAnZGFuZ2VyJztcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpdGVtLnR5cGUgPSAnZGVmYXVsdCc7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgdGhhdC5zZXREYXRhKHtcbiAgICAgICAgLi4uZGF0YSxcbiAgICAgICAgb3BlcmF0aW9uLFxuICAgICAgfSk7XG4gICAgICB0aGF0LnJlZnJlc2hEZXRhaWwoKTtcbiAgICB9KVxuICB9LFxuXG4gIG9uUHVsbERvd25SZWZyZXNoKCkge1xuICAgIHRoaXMucmVmcmVzaERldGFpbCgpO1xuICB9XG5cbn0pIl19