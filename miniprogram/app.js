import { wxRequest } from './utils/request';
import { CONSTANT_SESSIONDATA_KEY } from './utils/constant';
App({
    globalData: {
        baseUrl: "https://app.gzmpc.com/NewMobilePlatform/api",
        appId: "wx87d027dd5e097c89",
        appSecret: "fd356b9cea5ecf82d63abeaf4434ccdf",
    },
    setToken(accessToken) {
        this.globalData.token = accessToken;
        const sessionData = this.getSessionCache();
        if (sessionData) {
            sessionData.openid;
        }
    },
    wxLogin() {
        const that = this;
        const { appId, appSecret } = this.globalData;
        wx.login({
            success: res => {
                wxRequest({
                    url: "https://wechat-api.gzmpc.com/v1/mp/code2Session",
                    method: 'POST',
                    data: {
                        appid: appId,
                        secret: appSecret,
                        jsCode: res.code,
                    }
                }).then((res) => {
                    if (res.statusCode == 200) {
                        const data = res.data;
                        const sessionData = { ...data };
                        that.globalData.sessionData = sessionData;
                        wx.setStorageSync(CONSTANT_SESSIONDATA_KEY, sessionData);
                    }
                    else {
                    }
                });
            },
        });
    },
    getSessionCache() {
        try {
            const value = wx.getStorageSync(CONSTANT_SESSIONDATA_KEY);
            if (value) {
                this.globalData.sessionData = value;
                return value;
            }
            else {
                return undefined;
            }
        }
        catch (e) {
            return undefined;
        }
    },
    onLaunch() {
        const that = this;
        wx.checkSession({
            success() {
                const sessionData = that.getSessionCache();
                if (!sessionData) {
                    that.wxLogin();
                }
            },
            fail() {
                that.wxLogin();
            }
        });
        wx.getSetting({
            success: res => {
                if (res.authSetting['scope.userInfo']) {
                    wx.getUserInfo({
                        success: res => {
                            this.globalData.userInfo = res.userInfo;
                            if (this.userInfoReadyCallback) {
                                this.userInfoReadyCallback(res);
                            }
                        },
                    });
                }
            },
        });
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXBwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUM1QyxPQUFPLEVBQUUsd0JBQXdCLEVBQUcsTUFBTSxrQkFBa0IsQ0FBQztBQUU3RCxHQUFHLENBQVk7SUFDYixVQUFVLEVBQUU7UUFDVixPQUFPLEVBQUUsNkNBQTZDO1FBQ3RELEtBQUssRUFBRSxvQkFBb0I7UUFDM0IsU0FBUyxFQUFFLGtDQUFrQztLQUU5QztJQUVELFFBQVEsQ0FBQyxXQUFtQjtRQUMxQixJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssR0FBRyxXQUFXLENBQUM7UUFFcEMsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBQzNDLElBQUcsV0FBVyxFQUFFO1lBQ2QsV0FBVyxDQUFDLE1BQU0sQ0FBQztTQUNwQjtJQUNILENBQUM7SUFHRCxPQUFPO1FBQ0wsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2xCLE1BQU0sRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztRQUM3QyxFQUFFLENBQUMsS0FBSyxDQUFDO1lBQ1AsT0FBTyxFQUFFLEdBQUcsQ0FBQyxFQUFFO2dCQUViLFNBQVMsQ0FBQztvQkFDUixHQUFHLEVBQUUsaURBQWlEO29CQUN0RCxNQUFNLEVBQUUsTUFBTTtvQkFDZCxJQUFJLEVBQUU7d0JBQ0osS0FBSyxFQUFFLEtBQUs7d0JBQ1osTUFBTSxFQUFFLFNBQVM7d0JBQ2pCLE1BQU0sRUFBRSxHQUFHLENBQUMsSUFBSTtxQkFDakI7aUJBQ0YsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO29CQUNkLElBQUksR0FBRyxDQUFDLFVBQVUsSUFBSSxHQUFHLEVBQUU7d0JBQ3pCLE1BQU0sSUFBSSxHQUFRLEdBQUcsQ0FBQyxJQUFJLENBQUM7d0JBQzNCLE1BQU0sV0FBVyxHQUFnQixFQUFFLEdBQUcsSUFBSSxFQUFFLENBQUM7d0JBRTdDLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQzt3QkFHMUMsRUFBRSxDQUFDLGNBQWMsQ0FBQyx3QkFBd0IsRUFBRSxXQUFXLENBQUMsQ0FBQztxQkFDMUQ7eUJBQ0k7cUJBRUo7Z0JBQ0gsQ0FBQyxDQUFDLENBQUM7WUFDTCxDQUFDO1NBQ0YsQ0FBQyxDQUFBO0lBQ0osQ0FBQztJQUVELGVBQWU7UUFDYixJQUFJO1lBQ0YsTUFBTSxLQUFLLEdBQWdCLEVBQUUsQ0FBQyxjQUFjLENBQUMsd0JBQXdCLENBQUMsQ0FBQztZQUN2RSxJQUFHLEtBQUssRUFBRTtnQkFDUixJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7Z0JBQ3BDLE9BQU8sS0FBSyxDQUFDO2FBQ2Q7aUJBQ0k7Z0JBQ0gsT0FBTyxTQUFTLENBQUM7YUFDbEI7U0FDRjtRQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ1YsT0FBTyxTQUFTLENBQUM7U0FDbEI7SUFDSCxDQUFDO0lBRUQsUUFBUTtRQUNOLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQztRQUdsQixFQUFFLENBQUMsWUFBWSxDQUFDO1lBQ2QsT0FBTztnQkFFTCxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7Z0JBQzNDLElBQUcsQ0FBQyxXQUFXLEVBQUU7b0JBQ2YsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO2lCQUNoQjtZQUNILENBQUM7WUFDRCxJQUFJO2dCQUVGLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUNqQixDQUFDO1NBQ0YsQ0FBQyxDQUFBO1FBR0YsRUFBRSxDQUFDLFVBQVUsQ0FBQztZQUNaLE9BQU8sRUFBRSxHQUFHLENBQUMsRUFBRTtnQkFDYixJQUFJLEdBQUcsQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLENBQUMsRUFBRTtvQkFFckMsRUFBRSxDQUFDLFdBQVcsQ0FBQzt3QkFDYixPQUFPLEVBQUUsR0FBRyxDQUFDLEVBQUU7NEJBRWIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQTs0QkFJdkMsSUFBSSxJQUFJLENBQUMscUJBQXFCLEVBQUU7Z0NBQzlCLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxHQUFHLENBQUMsQ0FBQTs2QkFDaEM7d0JBQ0gsQ0FBQztxQkFDRixDQUFDLENBQUE7aUJBQ0g7WUFDSCxDQUFDO1NBQ0YsQ0FBQyxDQUFBO0lBQ0osQ0FBQztDQUNGLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8vIGFwcC50c1xuaW1wb3J0IHsgd3hSZXF1ZXN0IH0gZnJvbSAnLi91dGlscy9yZXF1ZXN0JztcbmltcG9ydCB7IENPTlNUQU5UX1NFU1NJT05EQVRBX0tFWSAgfSBmcm9tICcuL3V0aWxzL2NvbnN0YW50JztcblxuQXBwPEJwbU9wdGlvbj4oe1xuICBnbG9iYWxEYXRhOiB7XG4gICAgYmFzZVVybDogXCJodHRwczovL2FwcC5nem1wYy5jb20vTmV3TW9iaWxlUGxhdGZvcm0vYXBpXCIsXG4gICAgYXBwSWQ6IFwid3g4N2QwMjdkZDVlMDk3Yzg5XCIsXG4gICAgYXBwU2VjcmV0OiBcImZkMzU2YjljZWE1ZWNmODJkNjNhYmVhZjQ0MzRjY2RmXCIsXG4gICAgLy8gdG9rZW46IFwiMzIwZTcyNzRiM2U3YmY4NmMxODFmMTFkMmI4MzkwM2NcIixcbiAgfSxcblxuICBzZXRUb2tlbihhY2Nlc3NUb2tlbjogc3RyaW5nKSB7XG4gICAgdGhpcy5nbG9iYWxEYXRhLnRva2VuID0gYWNjZXNzVG9rZW47XG5cbiAgICBjb25zdCBzZXNzaW9uRGF0YSA9IHRoaXMuZ2V0U2Vzc2lvbkNhY2hlKCk7XG4gICAgaWYoc2Vzc2lvbkRhdGEpIHtcbiAgICAgIHNlc3Npb25EYXRhLm9wZW5pZDtcbiAgICB9XG4gIH0sXG5cbiAgLy8g55m75b2VXG4gIHd4TG9naW4oKSB7XG4gICAgY29uc3QgdGhhdCA9IHRoaXM7XG4gICAgY29uc3QgeyBhcHBJZCwgYXBwU2VjcmV0IH0gPSB0aGlzLmdsb2JhbERhdGE7XG4gICAgd3gubG9naW4oe1xuICAgICAgc3VjY2VzczogcmVzID0+IHtcbiAgICAgICAgLy8g5Y+R6YCBIHJlcy5jb2RlIOWIsOWQjuWPsOaNouWPliBvcGVuSWQsIHNlc3Npb25LZXksIHVuaW9uSWRcbiAgICAgICAgd3hSZXF1ZXN0KHtcbiAgICAgICAgICB1cmw6IFwiaHR0cHM6Ly93ZWNoYXQtYXBpLmd6bXBjLmNvbS92MS9tcC9jb2RlMlNlc3Npb25cIixcbiAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBhcHBpZDogYXBwSWQsXG4gICAgICAgICAgICBzZWNyZXQ6IGFwcFNlY3JldCxcbiAgICAgICAgICAgIGpzQ29kZTogcmVzLmNvZGUsXG4gICAgICAgICAgfVxuICAgICAgICB9KS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgICBpZiAocmVzLnN0YXR1c0NvZGUgPT0gMjAwKSB7XG4gICAgICAgICAgICBjb25zdCBkYXRhOiBhbnkgPSByZXMuZGF0YTtcbiAgICAgICAgICAgIGNvbnN0IHNlc3Npb25EYXRhOiBTZXNzaW9uRGF0YSA9IHsgLi4uZGF0YSB9O1xuXG4gICAgICAgICAgICB0aGF0Lmdsb2JhbERhdGEuc2Vzc2lvbkRhdGEgPSBzZXNzaW9uRGF0YTtcblxuICAgICAgICAgICAgLy/kv53lrZjliLDnvJPlrZjkuK1cbiAgICAgICAgICAgIHd4LnNldFN0b3JhZ2VTeW5jKENPTlNUQU5UX1NFU1NJT05EQVRBX0tFWSwgc2Vzc2lvbkRhdGEpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcblxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgIH0pXG4gIH0sXG5cbiAgZ2V0U2Vzc2lvbkNhY2hlKCkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB2YWx1ZTpTZXNzaW9uRGF0YSAgPSB3eC5nZXRTdG9yYWdlU3luYyhDT05TVEFOVF9TRVNTSU9OREFUQV9LRVkpO1xuICAgICAgaWYodmFsdWUpIHtcbiAgICAgICAgdGhpcy5nbG9iYWxEYXRhLnNlc3Npb25EYXRhID0gdmFsdWU7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICB9LFxuXG4gIG9uTGF1bmNoKCkge1xuICAgIGNvbnN0IHRoYXQgPSB0aGlzO1xuXG5cbiAgICB3eC5jaGVja1Nlc3Npb24oe1xuICAgICAgc3VjY2VzcygpIHtcbiAgICAgICAgLy9zZXNzaW9uX2tleSDmnKrov4fmnJ/vvIzlubbkuJTlnKjmnKznlJ/lkb3lkajmnJ/kuIDnm7TmnInmlYhcbiAgICAgICAgY29uc3Qgc2Vzc2lvbkRhdGEgPSB0aGF0LmdldFNlc3Npb25DYWNoZSgpO1xuICAgICAgICBpZighc2Vzc2lvbkRhdGEpIHtcbiAgICAgICAgICB0aGF0Lnd4TG9naW4oKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGZhaWwoKSB7XG4gICAgICAgIC8vIHNlc3Npb25fa2V5IOW3sue7j+WkseaViO+8jOmcgOimgemHjeaWsOaJp+ihjOeZu+W9lea1geeoi1xuICAgICAgICB0aGF0Lnd4TG9naW4oKTtcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgLy8g6I635Y+W55So5oi35L+h5oGvXG4gICAgd3guZ2V0U2V0dGluZyh7XG4gICAgICBzdWNjZXNzOiByZXMgPT4ge1xuICAgICAgICBpZiAocmVzLmF1dGhTZXR0aW5nWydzY29wZS51c2VySW5mbyddKSB7XG4gICAgICAgICAgLy8g5bey57uP5o6I5p2D77yM5Y+v5Lul55u05o6l6LCD55SoIGdldFVzZXJJbmZvIOiOt+WPluWktOWDj+aYteensO+8jOS4jeS8muW8ueahhlxuICAgICAgICAgIHd4LmdldFVzZXJJbmZvKHtcbiAgICAgICAgICAgIHN1Y2Nlc3M6IHJlcyA9PiB7XG4gICAgICAgICAgICAgIC8vIOWPr+S7peWwhiByZXMg5Y+R6YCB57uZ5ZCO5Y+w6Kej56CB5Ye6IHVuaW9uSWRcbiAgICAgICAgICAgICAgdGhpcy5nbG9iYWxEYXRhLnVzZXJJbmZvID0gcmVzLnVzZXJJbmZvXG5cbiAgICAgICAgICAgICAgLy8g55Sx5LqOIGdldFVzZXJJbmZvIOaYr+e9kee7nOivt+axgu+8jOWPr+iDveS8muWcqCBQYWdlLm9uTG9hZCDkuYvlkI7miY3ov5Tlm55cbiAgICAgICAgICAgICAgLy8g5omA5Lul5q2k5aSE5Yqg5YWlIGNhbGxiYWNrIOS7pemYsuatoui/meenjeaDheWGtVxuICAgICAgICAgICAgICBpZiAodGhpcy51c2VySW5mb1JlYWR5Q2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICB0aGlzLnVzZXJJbmZvUmVhZHlDYWxsYmFjayhyZXMpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICB9KVxuICB9LFxufSkiXX0=